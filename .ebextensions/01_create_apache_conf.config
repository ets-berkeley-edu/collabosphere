#
# Apache configuration files and keys.
#
files:

  # The default Elastic Beanstalk .conf file for NodeJS containers must be overwritten. We create a
  # replacement file here, then overwrite the default (02_overwrite_apache_conf.config) and restart Apache 
  # (99_delayed_script.config).
  /tmp/suitec.httpd.conf:
    mode: '000644'
    owner: root
    group: root
    content: |
      # Elastic Beanstalk Managed
      #
      # Elastic Beanstalk managed configuration file
      # Some configuration of httpd can be by placing files in /etc/httpd/conf.d/
      # using Configuration Files.
      # http://docs.amazonwebservices.com/elasticbeanstalk/latest/dg/customize-containers.html
      #
      # This file was overwritten during deployment by .ebextensions/02_overwrite_apache_conf.config

      Listen 8080

      <VirtualHost *:8080>
        # SuiteC requires the following non-standard modules:
        # - proxy_ws_tunnel - so websockets can be proxied to the node.js app server
        # - deflate - so static assets can be compressed
        # - headers - so cache headers can be added on the static assets
        <IfModule !proxy_ws_tunnel_module>
          LoadModule proxy_wstunnel_module /etc/httpd/modules/mod_proxy_wstunnel.so
        </IfModule>
        <IfModule !deflate_module>
          LoadModule deflate_module /etc/httpd/modules/mod_deflate.so
        </IfModule>
        <IfModule !headers_module>
           LoadModule headers_module /etc/httpd/modules/mod_headers.so
        </IfModule>

        <Directory /var/www/html/suitec>
          Order allow,deny
          Allow from all
          Require all granted
        </Directory>

        DocumentRoot /var/www/html/suitec

        # Allow cross-origin calls from any website. This is required for the bookmarklet tool.
        Header set Access-Control-Allow-Origin "*"

        RewriteEngine on

        # Required for socket.io's polling transport
        RewriteCond %{QUERY_STRING} transport=polling
        RewriteRule /(.*)$ http://localhost:2000/$1 [P]

        # Expose the LTI launch URLs
        RewriteRule ^/assetlibrary         /var/www/html/suitec/index.html
        RewriteRule ^/dashboard            /var/www/html/suitec/index.html
        RewriteRule ^/engagementindex      /var/www/html/suitec/index.html
        RewriteRule ^/whiteboards          /var/www/html/suitec/index.html

        # Proxy websocket connections
        ProxyPass         /socket.io/   ws://localhost:2000/socket.io/
        ProxyPassReverse  /socket.io/   ws://localhost:2000/socket.io/

        # Proxy API & LTI calls to the application server
        ProxyPass         /api          http://localhost:2000/api retry=0
        ProxyPass         /lti          http://localhost:2000/lti retry=0
        ProxyPreserveHost On

        # Indicate that we're forwarding a request that came in over HTTPS. This
        # is important for the LTI signature.
        RequestHeader set X-Forwarded-Proto "https"

        # GZIP all responses using mod_deflate
        SetOutputFilter DEFLATE
        AddOutputFilterByType DEFLATE text/plain
        AddOutputFilterByType DEFLATE text/html
        AddOutputFilterByType DEFLATE text/xml
        AddOutputFilterByType DEFLATE text/css
        AddOutputFilterByType DEFLATE application/json
        AddOutputFilterByType DEFLATE application/xml
        AddOutputFilterByType DEFLATE application/xhtml+xml
        AddOutputFilterByType DEFLATE application/rss+xml
        AddOutputFilterByType DEFLATE application/javascript
        AddOutputFilterByType DEFLATE application/x-javascript

        # The production build makes all cacheable assets available under '/static'. We can aggressively
        # cache these as they should be properly versioned.
        <LocationMatch "^/static">
          ExpiresActive On
          ExpiresDefault "access plus 1 year"
        </LocationMatch>

        # Don't cache the root HTML pages or the bookmarklet init script.
        <LocationMatch "^(/assets/js/bookmarklet-init.js|/bookmarklet.html)">
          Header unset ETag
          Header set Cache-Control "max-age=0, no-cache, no-store, must-revalidate"
          Header set Pragma "no-cache"
          Header set Expires "Wed, 11 Jan 1984 05:00:00 GMT"
        </LocationMatch>

      </VirtualHost>

  # Proxy SSL connections to port 80, to be handled by the SuiteC-specific conf above.
  /etc/httpd/conf.d/ssl.conf:
    mode: '000644'
    owner: root
    group: root
    content: |
      LoadModule ssl_module modules/mod_ssl.so
      Listen 443
      <VirtualHost *:443>
        <Proxy *>
          Order deny,allow
          Allow from all
        </Proxy>

        SSLEngine             on
        SSLCertificateFile    "/etc/pki/tls/certs/suitec_instance.crt"
        SSLCertificateKeyFile "/etc/pki/tls/certs/suitec_instance.key"
        SSLCipherSuite        EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
        SSLProtocol           All -SSLv2 -SSLv3
        SSLHonorCipherOrder   On
        SSLSessionTickets     Off

        Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"
        Header always set X-Frame-Options DENY
        Header always set X-Content-Type-Options nosniff
        Header set Access-Control-Allow-Origin "*"

        ProxyPass / http://localhost:80/ retry=0
        ProxyPassReverse / http://localhost:80/
        ProxyPreserveHost on
        RequestHeader set X-Forwarded-Proto "https" early

      </VirtualHost>
      
  # The load balancer expects to find this SSL certificate on EC2 instances. Note that this is a self-signed
  # certificate for the load balancer's benefit only, not the domain-associated certificate that the load
  # balancer presents to users.
  /etc/pki/tls/certs/suitec_instance.crt:
    mode: '000400'
    owner: root
    group: root
    content: |
      -----BEGIN CERTIFICATE-----
      MIIEIjCCAwoCCQCwhQUqTb0YaDANBgkqhkiG9w0BAQUFADCB0jELMAkGA1UEBhMC
      VVMxEzARBgNVBAgTCkNhbGlmb3JuaWExETAPBgNVBAcTCEJlcmtlbGV5MSEwHwYD
      VQQKExhVbml2ZXJzaXR5IG9mIENhbGlmb3JuaWExKDAmBgNVBAsTH0VkdWNhdGlv
      bmFsIFRlY2hub2xvZ3kgU2VydmljZXMxIDAeBgNVBAMTF2V0cy1iZXJrZWxleS1z
      dWl0ZWMubmV0MSwwKgYJKoZIhvcNAQkBFh1hd3Mtc3VpdGVjQGxpc3RzLmJlcmtl
      bGV5LmVkdTAeFw0xNzAxMzAyMTMyNDFaFw0xODAxMzAyMTMyNDFaMIHSMQswCQYD
      VQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTERMA8GA1UEBxMIQmVya2VsZXkx
      ITAfBgNVBAoTGFVuaXZlcnNpdHkgb2YgQ2FsaWZvcm5pYTEoMCYGA1UECxMfRWR1
      Y2F0aW9uYWwgVGVjaG5vbG9neSBTZXJ2aWNlczEgMB4GA1UEAxMXZXRzLWJlcmtl
      bGV5LXN1aXRlYy5uZXQxLDAqBgkqhkiG9w0BCQEWHWF3cy1zdWl0ZWNAbGlzdHMu
      YmVya2VsZXkuZWR1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmiwl
      d0KYQsyPczI9NYX9+lywQOU4jUFuls/VyN/WV9iwNYnIe3PI2kGcuVjwGNA2c1NK
      WAjFUH4Ylbv0UjbXE2kPTIP7haJ+MzOWIuRP6xMyh6VBbw58y91btmDBts1KxeFt
      uho2SQ/K6W+obZRAAGvwy//ejL5H5KU9MDhFSfhvr1Obo5Dl4KtJ6Q3RyM33PUxl
      vFUUSyJq15vFkTS2081Ezj6grP4rDSwgWPpe3Nx7Qij1tbnWsNUhq34BiKUlTGo+
      3zks+y0CRs2vqFBbBbziHc7T6sXi5hf9FpIw1fDY08a7bdJ96oDKX79UuAWwoK2E
      AFeE8pPnAcpNq/BrrQIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQAXm7iNjbbmA0hm
      pYmatH7rYyt3x/cMIPk+JqAE5Wl7LX3AWs+VJUEQfmx7eH/OlIuH1DZG0JYELmDw
      yf0os30rNk1zz4+HT6+QdkikqVXWLljK3/F2UcLRQ1QxAUhhQZyjEA0S/QCeA+Um
      qQQ3IN3HNqsQtW2s9lZh3lULtjQPjiaxA0bHE7wpfDqZ7/3pqYVqDbDgSea7KK7a
      dlAHiyP7+LP4U00bQp/m1Hb5ykT/rLMjiVwqFpB+YjCsUsuPYq1UTLNA2zh7mvJP
      BhNKFR9+k+Kpl9YBcbLGoC67OPLjPUIdrBLu660JInFuItCiiq6w4aLBPUDGblgy
      8JH5mCAF
      -----END CERTIFICATE-----

  # Get the private key matching the certificate.
  /etc/pki/tls/certs/suitec_instance.key:
    mode: '000400'
    owner: root
    group: root
    authentication: "S3Auth"
    source: https://s3-us-west-2.amazonaws.com/elasticbeanstalk-us-west-2-234923831700/suitec/suitec_instance.key
