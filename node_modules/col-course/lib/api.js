/**
 * Copyright Â©2015. The Regents of the University of California (Regents). All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its documentation
 * for educational, research, and not-for-profit purposes, without fee and without a
 * signed licensing agreement, is hereby granted, provided that the above copyright
 * notice, this paragraph and the following two paragraphs appear in all copies,
 * modifications, and distributions.
 *
 * Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
 * Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
 * http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.
 *
 * IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
 * "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 */

var Joi = require('joi');

var DB = require('col-core/lib/db');
var log = require('col-core/lib/logger')('col-course');

/**
 * Get a course. If the course doesn't exist yet, it will be created
 *
 * @param  {Number}       canvasCourseId                    The id of the course in Canvas
 * @param  {Canvas}       canvas                            The Canvas instance the course is running on
 * @param  {Object}       courseInfo                        Additional info for the course
 * @param  {String}       [courseInfo.assetlibrary_url]     The URL where the asset library in this course can be reached
 * @param  {String}       [courseInfo.whiteboards_url]      The URL where the whiteboards in this course can be reached
 * @param  {Function}     callback                          Standard callback function
 * @param  {Object}       callback.err                      An error object, if any
 * @param  {Course}       callback.course                   The retrieved or created course
 */
var getOrCreateCourse = module.exports.getOrCreateCourse = function(canvasCourseId, canvas, courseInfo, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'canvasCourseId': Joi.number().required(),
    'canvas': Joi.object().required(),
    'courseInfo': Joi.object().keys({
      'assetlibrary_url': Joi.string().optional(),
      'whiteboards_url': Joi.string().optional()
    }).required()
  });

  var validationResult = Joi.validate({
    'canvasCourseId': canvasCourseId,
    'canvas': canvas,
    'courseInfo': courseInfo
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the course from the DB or create it if it doesn't exist yet
  options = {
    'where': {
      'canvas_course_id': canvasCourseId
    },
    'defaults': {
      'canvas_api_domain': canvas.canvas_api_domain,
      'assetlibrary_url': courseInfo.assetlibrary_url,
      'whiteboards_url': courseInfo.whiteboards_url
    }
  };
  DB.Course.findOrCreate(options).complete(function(err, data) {
    if (err) {
      log.error({'err': err}, 'Failed to get or create a course');
      return callback({'code': 500, 'msg': err.message});
    }

    var course = data[0];
    var wasCreated = data[1];

    if (wasCreated) {
      log.info({'id': course.id}, 'Created a new course');
      return callback(null, course);
    } else {
      course.updateAttributes(courseInfo).complete(function(err, course) {
        if (err) {
          log.error({'err': err}, 'Failed to update a course');
          return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, course);
      });
    }
  });
};

/**
 * Get all the courses from the database
 *
 * @param  {Boolean}    includeInactive         Whether to include the inactive courses. Defaults to `false`
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error that occurred, if any
 * @param  {Course[]}   callback.courses        The courses in the database. The associated `Canvas` object will be retrieved as well
 */
var getCourses = module.exports.getCourses = function(includeInactive, callback) {
  var where = {
    'active': true
  };
  if (includeInactive) {
    where = null;
  }
  var options = {
    'where': where,
    'include': [{
      'model': DB.Canvas,
      'as': 'canvas'
    }]
  };
  DB.Course.findAll(options).complete(callback);
};
