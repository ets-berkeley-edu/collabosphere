/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var config = require('config');
var cookie = require('cookie');
var cookieParser = require('cookie-parser');
var Joi = require('joi');

var Collabosphere = require('col-core');
var CollabosphereUtil = require('col-core/lib/util');
var DB = require('col-core/lib/db');
var log = require('col-core/lib/logger')('col-whiteboards');
var UserConstants = require('col-users/lib/constants');

/**
 * Get a whiteboard
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         id                              The id of the whiteboard
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Whiteboard}     callback.whiteboard             The requested whiteboard
 */
var getWhiteboard = module.exports.getWhiteboard = function(ctx, id, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'id': Joi.number().required()
  });

  var validationResult = Joi.validate({
    'id': id
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the whiteboard from the DB
  var options = {
    'where': {
      'id': id,
      'course_id': ctx.course.id
    },
    // TODO: Include online people
    'include': []
  };
  DB.Whiteboard.find(options).complete(function(err, whiteboard) {
    if (err) {
      log.error({'err': err, 'id': id}, 'Failed to get a whiteboard');
      return callback({'code': 500, 'msg': err.message});
    } else if (!whiteboard) {
      log.debug({'err': err, 'id': id}, 'A whiteboard with the specified id could not be found');
      return callback({'code': 404, 'msg': 'A whiteboard with the specified id could not be found'});
    }

    // TODO: Verify that the user has access to the whiteboard

    return callback(null, whiteboard);
  });
};

/**
 * Get the whiteboards to which the current user has access in the current course
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Number}         [offset]                        The number to start paging from. Defaults to 0
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Object}         callback.whiteboards            The retrieved whiteboards
 * @param  {Number}         callback.whiteboards.total      The total number of whiteboards to which the current user has access in the current course
 * @param  {Whiteboard[]}   callback.whiteboards.results    The paged whiteboard to which the current user has access in the current course
 */
var getWhiteboards = module.exports.getWhiteboards = function(ctx, limit, offset, callback) {
  // Default some parameters
  limit = CollabosphereUtil.getNumberParam(limit, 10, 1, 25);
  offset = CollabosphereUtil.getNumberParam(offset, 0, 0);

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'limit': Joi.number().required(),
    'offset': Joi.number().required()
  });

  var validationResult = Joi.validate({
    'limit': limit,
    'offset': offset
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the whiteboards from the DB
  var options = {
    'where': {
      'course_id': ctx.course.id
    },
    'order': [['online_count', 'DESC']],
    'limit': limit,
    'offset': offset
  };
  DB.Whiteboard.findAndCountAll(options).complete(function(err, result) {
    if (err) {
      log.error({'err': err, 'course': ctx.course, 'user': ctx.user}, 'Failed to get the whiteboard to which the current user has access in the current course');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback(null, {
      'total': result.count,
      'results': result.rows
    });
  });
};

/**
 * Create a new whiteboard
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {String}         title                           The title of the whiteboard
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Whiteboard}     callback.whiteboard             The created whiteboard
 */
var createWhiteboard = module.exports.createWhiteboard = function(ctx, title, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'title': Joi.string().max(255).required()
  });

  var validationResult = Joi.validate({
    'title': title
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Create the whiteboard in the DB
  var whiteboard = {
    'course_id': ctx.course.id,
    'title': title
  };

  DB.Whiteboard.create(whiteboard).complete(function(err, whiteboard) {
    if (err) {
      log.error({'err': err}, 'Failed to create a new whiteboard');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback(null, whiteboard);
  });
};

/**
 *
 */
var setOnline = function(userId, whiteboardId, socketId) {

};

/* WHITEBOARD ELEMENTS */

/**
 * TODO
 */
var addWhiteboardElement = module.exports.addWhiteboardElement = function(ctx, whiteboardId, element, callback) {
  console.log('ADDED *****************');
  console.log(whiteboardId);
  console.log(element);
  Collabosphere.appServer.io.sockets.in(whiteboardId).emit('addElement', element);
  return callback();
  console.log('*****************');
}

/**
 * TODO
 */
var updateWhiteboardElement = module.exports.updateWhiteboardElement = function(ctx, whiteboardId, element, callback) {
  console.log('UPDATED *****************');
  console.log(whiteboardId);
  console.log(element);
  Collabosphere.appServer.io.sockets.in(whiteboardId).emit('updateElement', element);
  return callback();
  console.log('*****************');
}

/* WEB SOCKETS */

// TODO
Collabosphere.appServer.io.on('connection', function(socket) {
  console.log('A user has connected!!!');
  console.log(socket.handshake.headers.referer);
  console.log(socket.handshake.headers.cookie);
  console.log(cookie.parse(socket.handshake.headers.cookie));
  console.log(config.get('cookie.secret'));
  console.log(cookieParser.signedCookie(cookie.parse(socket.handshake.headers.cookie)['localhost:3100_3'], config.get('cookie.secret')));

  var room = null;

  socket.on('subscribe', function(data) {
    room = parseInt(data.whiteboard);
    socket.join(room);
  });

  socket.on('disconnect', function(){
    console.log('A user has disconnected!!!');
    socket.leave(room);
  });
});

/* CHAT */

/**
 * Get a chat message.
 * Note that this is a private method that doesn't do any validation
 *
 * @param  {Number}         id                              The id of the chat message to retrieve
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Comment}        callback.chatMessage            The created chat message
 * @param  {User}           callback.chatMessage.user       The user that created the chat message
 * @api private
 */
var getChatMessage = function(id, callback) {
  var options = {
    'where': {
      'id': id
    },
    'include': [{
      'model': DB.User,
      'attributes': UserConstants.BASIC_USER_FIELDS
    }]
  };
  DB.Chat.find(options).complete(function(err, chatMessage) {
    if (err) {
      log.error({'err': err, 'id': id}, 'Failed to retrieve the chat message');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback(null, chatMessage);
  });
};

/**
 * Create a new chat message on a whiteboard
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         whiteboardId                    The id of the whiteboard to which the chat message is added
 * @param  {String}         body                            The body of the chat message
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Comment}        callback.chatMessage            The created chat message
 * @param  {User}           callback.chatMessage.user       The user that created the chat message
 */
var createChatMessage = module.exports.createChatMessage = function(ctx, whiteboardId, body, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'whiteboardId': Joi.number().required(),
    'body': Joi.string().required()
  });

  var validationResult = Joi.validate({
    'whiteboardId': whiteboardId,
    'body': body
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the whiteboard to which the comment is being added
  getWhiteboard(ctx, whiteboardId, function(err, whiteboard) {
    if (err) {
      return callback(err);
    }

    // Create the chat message in the database
    var chatMessage = {
      'whiteboard_id': whiteboardId,
      'user_id': ctx.user.id,
      'body': body
    };

    DB.Chat.create(chatMessage).complete(function(err, chatMessage) {
      if (err) {
        log.error({'err': err}, 'Failed to create a new chat message');
        return callback({'code': 500, 'msg': err.message});
      }

      // TODO
      Collabosphere.appServer.io.sockets.in(whiteboardId).emit('chat', chatMessage);

      // Retrieve the created chat message, including the associated user
      getChatMessage(chatMessage.id, callback);
    });
  });
};

/**
 * Get the most recent chat messages for a whiteboard
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         whiteboardId                    The id of the whiteboard for which to get the most chat messages
 * // TODO: Add timestamp
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Chat[]}         callback.chatMessages           The most recent chat messages
 */
var getChatMessages = module.exports.getChatMessages = function(ctx, whiteboardId, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'whiteboardId': Joi.number().required()
  });

  var validationResult = Joi.validate({
    'whiteboardId': whiteboardId
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the whiteboard for which to retrieve the recent chat messages
  getWhiteboard(ctx, whiteboardId, function(err, whiteboard) {
    if (err) {
      return callback(err);
    }

    // Get the chat messages from the DB
    var options = {
      'where': {
        'whiteboard_id': whiteboardId
      },
      'order': [['created_at', 'DESC']],
      'limit': 40,
      'include': [
        {
          'model': DB.User,
          'attributes': UserConstants.BASIC_USER_FIELDS
        }
      ]
    };

    DB.Chat.findAll(options).complete(function(err, chatMessages) {
      if (err) {
        log.error({'err': err, 'whiteboard': whiteboardId}, 'Failed to get the recent chat messages for a whiteboard');
        return callback({'code': 500, 'msg': err.message});
      }

      return callback(null, chatMessages);
    });
  });
};
