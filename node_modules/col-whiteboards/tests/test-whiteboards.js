/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');
var randomstring = require('randomstring');

var TestsUtil = require('col-tests');
var UsersTestUtil = require('col-users/tests/util');

var WhiteboardsTestUtil = require('./util');

describe('Whiteboards', function() {

  describe('Create new whiteboard', function() {

    /**
     * Test that verifies that a new whiteboard can be created
     */
    it('can be created', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(clientA, course, userA) {
        UsersTestUtil.assertGetMe(clientA, course, null, function(meA) {
          TestsUtil.getAssetLibraryClient(null, course, null, function(clientB, course, userB) {
            UsersTestUtil.assertGetMe(clientB, course, null, function(meB) {
              TestsUtil.getAssetLibraryClient(null, course, null, function(clientC, course, userC) {
                UsersTestUtil.assertGetMe(clientC, course, null, function(meC) {

                  // Create a whiteboard with no additional members
                  WhiteboardsTestUtil.assertCreateWhiteboard(clientA, course, 'UC Berkeley Whiteboard', null, function(whiteboard1) {
                    // Create a whiteboard with a single additional member
                    WhiteboardsTestUtil.assertCreateWhiteboard(clientA, course, 'UC Davis Whiteboard', meB.id, function(whiteboard2) {
                      // Create a whiteboard with a single additional member and the current user
                      WhiteboardsTestUtil.assertCreateWhiteboard(clientA, course, 'UC Davis Whiteboard', [meA.id, meB.id], function(whiteboard2) {
                        // Create a whiteboard with multiple additional members
                        WhiteboardsTestUtil.assertCreateWhiteboard(clientA, course, 'UC Merced Whiteboard', [meB.id, meC.id], function(whiteboard3) {

                          return callback();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies validation when creating a new whiteboard
     */
    it('is validated', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(clientA, courseA, userA) {
        TestsUtil.getAssetLibraryClient(null, courseA, null, function(clientB, courseA, userB) {
          UsersTestUtil.assertGetMe(clientB, courseA, null, function(meB) {
            TestsUtil.getAssetLibraryClient(null, null, null, function(clientC, courseB, userC) {
              UsersTestUtil.assertGetMe(clientC, courseB, null, function(meC) {

                // Missing title
                WhiteboardsTestUtil.assertCreateWhiteboardFails(clientA, courseA, null, null, 400, function() {
                  // Too long title
                  WhiteboardsTestUtil.assertCreateWhiteboardFails(clientA, courseA, randomstring.generate(256), null, 400, function() {

                    // Invalid user
                    WhiteboardsTestUtil.assertCreateWhiteboardFails(clientA, courseA, 'UC Berkeley Whiteboard', 'invalid', 400, function() {
                      WhiteboardsTestUtil.assertCreateWhiteboardFails(clientA, courseA, 'UC Berkeley Whiteboard', 4242, 404, function() {
                        WhiteboardsTestUtil.assertCreateWhiteboardFails(clientA, courseA, 'UC Berkeley Whiteboard', [meB.id, 'invalid'], 400, function() {
                          WhiteboardsTestUtil.assertCreateWhiteboardFails(clientA, courseA, 'UC Berkeley Whiteboard', [meB.id, 4242], 404, function() {

                            // User from different course
                            WhiteboardsTestUtil.assertCreateWhiteboardFails(clientA, courseA, 'UC Berkeley Whiteboard', meC.id, 404, function() {
                              WhiteboardsTestUtil.assertCreateWhiteboardFails(clientA, courseA, 'UC Berkeley Whiteboard', [meB.id, meC.id], 404, function() {

                                return callback();
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Get whiteboard', function() {

    /**
     * Test that verifies that a whiteboard can be retrieved
     */
    it('can be retrieved', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(clientA, course, userA) {
        UsersTestUtil.assertGetMe(clientA, course, null, function(meA) {
          TestsUtil.getAssetLibraryClient(null, course, null, function(clientB, course, userB) {
            UsersTestUtil.assertGetMe(clientB, course, null, function(meB) {

              // Create a whiteboard with no additional members
              WhiteboardsTestUtil.assertCreateWhiteboard(clientA, course, 'UC Berkeley Whiteboard', null, function(whiteboard1) {
                WhiteboardsTestUtil.assertGetWhiteboard(clientA, course, whiteboard1.id, whiteboard1, 1, function(whiteboard1) {

                  // Create a whiteboard with the current user explicitly provided
                  WhiteboardsTestUtil.assertCreateWhiteboard(clientA, course, 'UC Davis Whiteboard', meA.id, function(whiteboard2) {
                    WhiteboardsTestUtil.assertGetWhiteboard(clientA, course, whiteboard2.id, whiteboard2, 1, function(whiteboard2) {

                      // Create a whiteboard with additional members
                      WhiteboardsTestUtil.assertCreateWhiteboard(clientA, course, 'UC Merced Whiteboard', [meB.id], function(whiteboard3) {
                        WhiteboardsTestUtil.assertGetWhiteboard(clientA, course, whiteboard3.id, whiteboard3, 2, function(whiteboard3) {

                          return callback();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies validation when retrieving a whiteboard
     */
    it('is validated', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        WhiteboardsTestUtil.assertCreateWhiteboard(client, course, 'UC Berkeley Whiteboard', null, function(whiteboard) {

          // Invalid whiteboard id
          WhiteboardsTestUtil.assertGetWhiteboardFails(client, course, 'Not a number', 400, function() {
            WhiteboardsTestUtil.assertGetWhiteboardFails(client, course, -1, 404, function() {
              WhiteboardsTestUtil.assertGetWhiteboardFails(client, course, 234234233, 404, function() {

                return callback();
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies authorization when retrieving a whiteboard
     */
    it('verifies whiteboard retrieval authorization', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(clientA, courseA, userA) {
        TestsUtil.getAssetLibraryClient(null, courseA, null, function(clientB, courseA, userB) {
          UsersTestUtil.assertGetMe(clientB, courseA, null, function(meB) {
            TestsUtil.getAssetLibraryClient(null, courseA, null, function(clientC, courseA, userC) {
              var adminUserA = TestsUtil.generateUser(null, null, 'Instructor');
              TestsUtil.getAssetLibraryClient(null, courseA, adminUserA, function(clientD, courseA, adminUserA) {
                TestsUtil.getAssetLibraryClient(null, null, null, function(clientE, courseB, userE) {
                  var adminUserB = TestsUtil.generateUser(null, null, 'Instructor');
                  TestsUtil.getAssetLibraryClient(null, courseB, adminUserB, function(clientF, courseB, adminUserB) {

                    // Verify that a user that is not member can not retrieve the whiteboard
                    WhiteboardsTestUtil.assertCreateWhiteboard(clientA, courseA, 'UC Berkeley Whiteboard', meB.id, function(whiteboard) {
                      WhiteboardsTestUtil.assertGetWhiteboardFails(clientC, courseA, whiteboard.id, 404, function() {

                        // Verify that a user that is a member can retrieve the whiteboard
                        WhiteboardsTestUtil.assertGetWhiteboard(clientB, courseA, whiteboard.id, whiteboard, 2, function(whiteboard) {

                          // Verify that the user that created whiteboard can retrieve whiteboard
                          WhiteboardsTestUtil.assertGetWhiteboard(clientA, courseA, whiteboard.id, whiteboard, 2, function(whiteboard) {

                            // Verify that a course administrator that is not a member can retrieve the whiteboard
                            WhiteboardsTestUtil.assertGetWhiteboard(clientD, courseA, whiteboard.id, whiteboard, 2, function(whiteboard) {

                              // Verify that a whiteboard from a different course can not be retrieved
                              WhiteboardsTestUtil.assertGetWhiteboardFails(clientE, courseB, whiteboard.id, 404, function() {

                                // Verify that a course administrator can not retrieve a whiteboard from a different course
                                WhiteboardsTestUtil.assertGetWhiteboardFails(clientF, courseB, whiteboard.id, 404, function() {

                                  return callback();
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Get whiteboards', function() {

    /**
     * Test that verifies that the whiteboards in a course can be retrieved
     */
    it('can be retrieved', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(clientA, courseA, userA) {
        UsersTestUtil.assertGetMe(clientA, courseA, null, function(meA) {
          TestsUtil.getAssetLibraryClient(null, courseA, null, function(clientB, courseA, userB) {
            UsersTestUtil.assertGetMe(clientB, courseA, null, function(meB) {
              TestsUtil.getAssetLibraryClient(null, courseA, null, function(clientC, courseA, userC) {
                UsersTestUtil.assertGetMe(clientC, courseA, null, function(meC) {
                  var adminUserA = TestsUtil.generateUser(null, null, 'Instructor');
                  TestsUtil.getAssetLibraryClient(null, courseA, adminUserA, function(clientD, courseA, adminUserA) {
                    var adminUserB = TestsUtil.generateUser(null, null, 'Instructor');
                    TestsUtil.getAssetLibraryClient(null, null, adminUserB, function(clientE, courseB, adminUserB) {

                      // Retrieve the empty whiteboards list
                      WhiteboardsTestUtil.assertGetWhiteboards(clientA, courseA, null, null, 0, function(whiteboards) {

                        // Create a whiteboard
                        WhiteboardsTestUtil.assertCreateWhiteboard(clientA, courseA, 'UC Berkeley Whiteboard', meB.id, function(whiteboard1) {
                          // Verify that the whiteboard is returned for the creator
                          WhiteboardsTestUtil.assertGetWhiteboards(clientA, courseA, null, null, 1, function(whiteboards) {
                            WhiteboardsTestUtil.assertWhiteboard(whiteboards.results[0], {'expectedWhiteboard': whiteboard1});
                            // Verify that the whiteboard is returned for the other member
                            WhiteboardsTestUtil.assertGetWhiteboards(clientB, courseA, null, null, 1, function(whiteboards) {
                              WhiteboardsTestUtil.assertWhiteboard(whiteboards.results[0], {'expectedWhiteboard': whiteboard1});
                              // Verify that the whiteboard is not returned for a user that isn't a member
                              WhiteboardsTestUtil.assertGetWhiteboards(clientC, courseA, null, null, 0, function(whiteboards) {
                                // Verify that the whiteboard is returned for a course administrator
                                WhiteboardsTestUtil.assertGetWhiteboards(clientD, courseA, null, null, 1, function(whiteboards) {
                                  WhiteboardsTestUtil.assertWhiteboard(whiteboards.results[0], {'expectedWhiteboard': whiteboard1});

                                  // Create a second whiteboard as a different user
                                  WhiteboardsTestUtil.assertCreateWhiteboard(clientB, courseA, 'UC Davis Whiteboard', meC.id, function(whiteboard2) {
                                    // Verify that the first user only has a single whiteboard
                                    WhiteboardsTestUtil.assertGetWhiteboards(clientA, courseA, null, null, 1, function(whiteboards) {
                                      WhiteboardsTestUtil.assertWhiteboard(whiteboards.results[0], {'expectedWhiteboard': whiteboard1});
                                      // Verify that the second user now has 2 whiteboards. The results are expected to return in descending creation date order
                                      WhiteboardsTestUtil.assertGetWhiteboards(clientB, courseA, null, null, 2, function(whiteboards) {
                                        WhiteboardsTestUtil.assertWhiteboard(whiteboards.results[0], {'expectedWhiteboard': whiteboard2});
                                        WhiteboardsTestUtil.assertWhiteboard(whiteboards.results[1], {'expectedWhiteboard': whiteboard1});
                                        // Verify that the third user has a single whiteboard
                                        WhiteboardsTestUtil.assertGetWhiteboards(clientC, courseA, null, null, 1, function(whiteboards) {
                                          WhiteboardsTestUtil.assertWhiteboard(whiteboards.results[0], {'expectedWhiteboard': whiteboard2});
                                          // Verify that the course administrator has all whiteboards. The results are expected to return in descending creation date order
                                          WhiteboardsTestUtil.assertGetWhiteboards(clientD, courseA, null, null, 2, function(whiteboards) {
                                            WhiteboardsTestUtil.assertWhiteboard(whiteboards.results[0], {'expectedWhiteboard': whiteboard2});
                                            WhiteboardsTestUtil.assertWhiteboard(whiteboards.results[1], {'expectedWhiteboard': whiteboard1});

                                            // Verify that the created whiteboards don't show in a different course
                                            WhiteboardsTestUtil.assertGetWhiteboards(clientE, courseB, null, null, 0, function(whiteboards) {

                                              return callback();
                                            });
                                          });
                                        });
                                      });
                                    });
                                  });
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that the whiteboards in a course can be paged
     */
    it('can be paged', function(callback) {
      // Generate a number of test whiteboards for a course
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        TestsUtil.generateTestWhiteboards(client, course, 12, function(whiteboards) {

          // The results are expected to return in descending creation date order
          whiteboards = _.sortBy(whiteboards, 'id').reverse();

          // Verify that the page size defaults to 10 and the page defaults to the first page
          WhiteboardsTestUtil.assertGetWhiteboards(client, course, null, null, 12, function(pagedWhiteboards) {
            assert.strictEqual(pagedWhiteboards.results.length, 10);
            _.each(pagedWhiteboards.results, function(pagedWhiteboard, index) {
              WhiteboardsTestUtil.assertWhiteboard(pagedWhiteboard, {'expectedWhiteboard': whiteboards[index]});
            });

            // Verify that the second page can be retrieved
            WhiteboardsTestUtil.assertGetWhiteboards(client, course, null, 10, 12, function(pagedWhiteboards) {
              assert.strictEqual(pagedWhiteboards.results.length, 2);
              _.each(pagedWhiteboards.results, function(pagedWhiteboard, index) {
                WhiteboardsTestUtil.assertWhiteboard(pagedWhiteboard, {'expectedWhiteboard': whiteboards[10 + index]});
              });

              // Verify that a custom page size can be specified
              WhiteboardsTestUtil.assertGetWhiteboards(client, course, 5, null, 12, function(pagedWhiteboards) {
                assert.strictEqual(pagedWhiteboards.results.length, 5);
                _.each(pagedWhiteboards.results, function(pagedWhiteboard, index) {
                  WhiteboardsTestUtil.assertWhiteboard(pagedWhiteboard, {'expectedWhiteboard': whiteboards[index]});
                });
                // Get the second page using the custom page size
                WhiteboardsTestUtil.assertGetWhiteboards(client, course, 5, 5, 12, function(pagedWhiteboards) {
                  assert.strictEqual(pagedWhiteboards.results.length, 5);
                  _.each(pagedWhiteboards.results, function(pagedWhiteboard, index) {
                    WhiteboardsTestUtil.assertWhiteboard(pagedWhiteboard, {'expectedWhiteboard': whiteboards[5 + index]});
                  });
                  // Get the last page using the custom page size
                  WhiteboardsTestUtil.assertGetWhiteboards(client, course, 5, 10, 12, function(pagedWhiteboards) {
                    assert.strictEqual(pagedWhiteboards.results.length, 2);
                    _.each(pagedWhiteboards.results, function(pagedWhiteboard, index) {
                      WhiteboardsTestUtil.assertWhiteboard(pagedWhiteboard, {'expectedWhiteboard': whiteboards[10 + index]});
                    });
                    // Verify that further pages will be empty
                    WhiteboardsTestUtil.assertGetWhiteboards(client, course, 5, 15, 12, function(pagedWhiteboards) {
                      assert.strictEqual(pagedWhiteboards.results.length, 0);

                      return callback();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Edit whiteboard', function() {

    /**
     * Test that verifies that a whiteboard can be edited
     */
    it('can be edited', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(clientA, course, userA) {
        TestsUtil.getAssetLibraryClient(null, course, null, function(clientB, course, userB) {
          UsersTestUtil.assertGetMe(clientB, course, null, function(meB) {
            TestsUtil.getAssetLibraryClient(null, course, null, function(clientC, course, userC) {
              UsersTestUtil.assertGetMe(clientC, course, null, function(meC) {

                // Verify that the title and the members can be updated
                WhiteboardsTestUtil.assertCreateWhiteboard(clientA, course, 'UC Berkeley Whiteboard', meB.id, function(whiteboard) {
                  console.log(whiteboard);
                  WhiteboardsTestUtil.assertEditWhiteboard(clientA, course, whiteboard.id, 'UC Davis Whiteboard', meC.id, function(whiteboard) {

                    return callback();
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});

// TODO: Test whiteboard online
