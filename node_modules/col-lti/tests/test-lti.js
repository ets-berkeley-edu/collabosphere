/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');

var DB = require('col-core/lib/db');
var TestsUtil = require('col-tests');

var LtiTestsUtil = require('./util');
var UsersTestsUtil = require('col-users/tests/util');

describe('LTI', function() {

  describe('Asset Library', function() {

    describe('Cartridge', function() {

      /**
       * Test that verifies that the LTI cartridge can be retrieved and contains the correct information
       */
      it('can be retrieved', function(callback) {
        var client = TestsUtil.getAnonymousClient();
        LtiTestsUtil.assertAssetLibraryCartridgeSucceeds(client, function(cartridge) {
          return callback();
        });
      });
    });

    describe('Tool', function() {

      /**
       * Test that verifies that the Asset Library Tool can be launched
       */
      it('can be launched', function(callback) {
        var client = TestsUtil.getAnonymousClient();
        var course = TestsUtil.generateCanvasCourse(global.tests.canvas.ucberkeley);
        var user = TestsUtil.generateCanvasUser(global.tests.canvas.ucberkeley);
        LtiTestsUtil.assertAssetLibraryLaunchSucceeds(client, course, user, function() {
          return callback();
        });
      });

      /**
       * Test that verifies that the tool validates the LTI parameters
       */
      it('validates the lti parameters', function(callback) {
        var client = TestsUtil.getAnonymousClient();
        var course = TestsUtil.generateCanvasCourse(global.tests.canvas.ucberkeley);
        var user = TestsUtil.generateCanvasUser(global.tests.canvas.ucberkeley);

        // Missing api domain
        delete course.canvas.canvas_api_domain;
        delete user.canvas.canvas_api_domain;
        LtiTestsUtil.assertAssetLibraryLaunchFails(client, course, user, 400, function() {

          // Missing course id
          course = TestsUtil.generateCanvasCourse(global.tests.canvas.ucberkeley);
          delete course.id;
          LtiTestsUtil.assertAssetLibraryLaunchFails(client, course, user, 400, function() {
            return callback();
          });
        });
      });

      /**
       * Test that verifies that the same client can interact with multiple courses concurrently. This test
       * will essentially ensure that the cookies that are generated by the system aren't overwriting each other
       */
      it('can support the same client in two courses concurrently', function(callback) {
        // Launch a user into a new course
        LtiTestsUtil.getAssetLibraryClient(null, null, null, function(client, courseA, user) {

          // Launch the same user into another course
          LtiTestsUtil.getAssetLibraryClient(client, null, user, function(client, courseB, user) {

            // Getting the me feed in the context of course A should work
            UsersTestsUtil.assertGetMe(client, courseA, function(me) {
              assert.strictEqual(me.course.canvas_course_id, courseA.id);

              // Getting the me feed in the context of course B with the same client should work
              UsersTestsUtil.assertGetMe(client, courseB, function(me) {
                assert.strictEqual(me.course.canvas_course_id, courseB.id);
                return callback();
              });
            });
          });
        });
      });

      /**
       * Test that verifies that new courses are created on the fly
       */
      it('creates courses on the fly', function(callback) {
        // Launch a user into a new course
        LtiTestsUtil.getAssetLibraryClient(null, null, null, function(client, courseA, userA) {

          // Get the user's information
          UsersTestsUtil.assertGetMe(client, courseA, function(me) {
            assert.strictEqual(me.canvas_user_id, userA.id);
            assert.strictEqual(me.course.canvas_course_id, courseA.id);

            // Launching the tool for the same user in the same course should
            // not result in a new course
            LtiTestsUtil.getAssetLibraryClient(null, courseA, userA, function(client) {
              UsersTestsUtil.assertGetMe(client, courseA, function(meReload) {
                assert.strictEqual(meReload.course.id, me.course.id);

                // Launching the tool for a new user in the same course should
                // not result in a new Collabosphere course
                LtiTestsUtil.getAssetLibraryClient(null, courseA, null, function(client, courseA, userB) {
                  UsersTestsUtil.assertGetMe(client, courseA, function(meNewUser) {
                    assert.strictEqual(meNewUser.course.id, me.course.id);

                    // Launching the tool for the same user in another course
                    // should result in a new Collabosphere course
                    LtiTestsUtil.getAssetLibraryClient(null, null, userA, function(client, courseB, userA) {
                      UsersTestsUtil.assertGetMe(client, courseB, function(meNewCourse) {
                        assert.notEqual(meNewCourse.course.id, me.course.id);
                        return callback();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });

      /**
       * Test that verifies that new users are created on the fly
       */
      it('creates users on the fly', function(callback) {
        // Launch a user into a new course
        LtiTestsUtil.getAssetLibraryClient(null, null, null, function(client, courseA, userA) {

          // Get the user's information
          UsersTestsUtil.assertGetMe(client, courseA, function(me) {
            assert.strictEqual(me.canvas_user_id, userA.id);
            assert.strictEqual(me.course.canvas_course_id, courseA.id);

            // Launching the tool for the same user in the same course should
            // authenticate the client to the same Collabosphere user
            LtiTestsUtil.getAssetLibraryClient(null, courseA, userA, function(client) {
              UsersTestsUtil.assertGetMe(client, courseA, function(meReload) {
                assert.strictEqual(meReload.id, me.id);

                // Launching the tool for a new user in the same course should
                // result in a new Collabosphere user
                LtiTestsUtil.getAssetLibraryClient(null, courseA, null, function(client, courseA, userB) {
                  UsersTestsUtil.assertGetMe(client, courseA, function(meNewUser) {
                    assert.notEqual(meNewUser.id, me.id);

                    // Launching the tool for the same user in another course
                    // should result in a new Collabosphere user
                    LtiTestsUtil.getAssetLibraryClient(null, null, userA, function(client, courseB, userA) {
                      UsersTestsUtil.assertGetMe(client, courseB, function(meNewUser) {
                        assert.notEqual(meNewUser.id, me.id);
                        return callback();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});
