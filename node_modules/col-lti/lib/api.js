/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Joi = require('joi');
var lti = require('ims-lti');

var DB = require('col-core/lib/db');
var log = require('col-core/lib/logger')('col-lti');
var CollabosphereUtil = require('col-core/lib/util');

// A cached Joi validation schema that can be used to validate incoming LTI launch requests
var launchSchema = Joi.object().keys({
  // Parameters that Collabospehere needs
  'custom_canvas_api_domain': Joi.string().required(),
  'custom_canvas_course_id': Joi.number().required(),
  'custom_canvas_user_id': Joi.number().required(),
  'custom_canvas_enrollment_state': Joi.string().required(),
  'roles': Joi.string().required(),
  'lis_person_name_full': Joi.string().required(),

  // Parameters that should be present as part of the OAuth handshake
  'oauth_consumer_key': Joi.string().alphanum().length(32).required(),
  'oauth_nonce': Joi.string().alphanum().required(),
  'oauth_signature_method': Joi.string().required(),
  'oauth_timestamp': Joi.number().required(),
  'oauth_version': Joi.string().required(),
  'oauth_signature': Joi.string().required()

// Add .unknown() so Canvas can send more parameters
}).unknown();

/**
 * Launch a user into Collabosphere over LTI. This function will:
 *  - ensure the request is a proper LTI request
 *  - ensure the request is properly signed though OAuth 1.0
 *  - create new courses on the fly
 *  - create new users on the fly
 *
 * @param  {Request}      req                 The incoming HTTP request
 * @param  {Function}     callback            Standard callback function
 * @param  {Object}       callback.err        An error object, if any
 * @param  {Object}       callback.body       The validated parameters that were passed along in the request
 * @param  {User}         callback.user       The user that is associated with this LTI launch
 */
var launch = module.exports.launch = function(req, callback) {
  // Validate the request body
  var result = Joi.validate(req.body, launchSchema);
  if (result.error) {
    return callback({'code': 400, 'msg': result.error.details[0].message});
  }

  var consumer_key = req.body.oauth_consumer_key;
  var canvas_api_domain = req.body.custom_canvas_api_domain;
  var canvas_course_id = req.body.custom_canvas_course_id;
  var canvas_user_id = req.body.custom_canvas_user_id;
  var canvas_full_name = req.body.lis_person_name_full;
  var canvas_course_role = req.body.roles;
  var canvas_image = req.body.user_image;

  // Get the secret key that matches the given consumer key
  var options = {
    'where': {
      'canvas_api_domain': canvas_api_domain,
      'lti_key': consumer_key
    }
  };
  DB.Canvas.findOne(options).complete(function(err, canvas) {
    if (err) {
      log.error({'err': err}, 'Unable to query the database for the lti credentials');
      return callback({'code': 500, 'msg': 'Unable to query the database for the lti credentials'});
    } else if (!canvas) {
      log.error({'err': err}, 'No credentials exist for the given api_domain and consumer_key');
      return callback({'code': 400, 'msg': 'No credentials exist for the given api_domain and consumer_key'});
    }

    // Validate the LTI keys
    var provider = new lti.Provider(consumer_key, canvas.lti_secret);
    provider.valid_request(req, function(err, isValid) {
      if (err) {
        log.error({'err': err}, 'An LTI launch resulted in an error');
        return callback({'code': 400, 'msg': err.message});
      } else if (!isValid) {
        log.warn('An LTI launch was invalid');
        return callback({'code': 400, 'msg': 'Failed validation'});
      }

      // Create the course on the fly
      options = {
        'where': {
          'canvas_course_id': canvas_course_id
        },
        'defaults': {
          'canvas_canvas_api_domain': canvas.canvas_api_domain
        }
      };
      DB.Course.findOrCreate(options).complete(function(err, data) {
        if (err) {
          log.error({'err': err}, 'Unable to query the database for the course');
          return callback({'code': 500, 'msg': 'Unable to query the database for the course'});
        }

        var course = data[0];
        var wasCreated = data[1];
        if (wasCreated) {
          log.info({'id': course.id}, 'Created a new course');
        }

        // Create the user on the fly
        options = {
          'where': {
            'canvas_user_id': canvas_user_id,
            'course_id': course.id
          },
          'defaults': {
            'canvas_course_role': canvas_course_role,
            'canvas_full_name': canvas_full_name,
            'canvas_image': canvas_image,
            'course_id': course.id,
            'bookmarklet_token': CollabosphereUtil.generateString(32)
          }
        };
        DB.User.findOrCreate(options).complete(function(err, data) {
          if (err) {
            log.error({'err': err}, 'Unable to query the database for the user');
            return callback({'code': 400, 'msg': 'Unable to query the database for the user'});
          }

          var user = data[0];
          var wasCreated = data[1];
          if (wasCreated) {
            log.info({'id': user.id}, 'Created a new user');
          }

          return callback(null, provider.body, user);
        });
      });
    });
  });
};

/**
 * Get the Asset Library LTI Cartridge
 *
 * @param  {String}   host    The host for which to get the cartridge
 * @return {String}           The Basic LTI Cartridge for the Asset Library
 */
var getAssetLibraryCartridge = module.exports.getAssetLibraryCartridge = function(host) {
  // The domain where our application is running on
  var url = '//' + host;

  // Construct a Basic LTI cartridge that can be consumed by Canvas. It contains
  // information about how Canvas should interact with the tool and how it can
  // embed it in its own pages
  var xml = '<?xml version="1.0" encoding="UTF-8"?>';
  xml += '<cartridge_basiclti_link xmlns="http://www.imsglobal.org/xsd/imslticc_v1p0"';
  xml += '    xmlns:blti = "http://www.imsglobal.org/xsd/imsbasiclti_v1p0"';
  xml += '    xmlns:lticm ="http://www.imsglobal.org/xsd/imslticm_v1p0"';
  xml += '    xmlns:lticp ="http://www.imsglobal.org/xsd/imslticp_v1p0"';
  xml += '    xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"';
  xml += '    xsi:schemaLocation = "http://www.imsglobal.org/xsd/imslticc_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imslticc_v1p0.xsd';
  xml += '    http://www.imsglobal.org/xsd/imsbasiclti_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imsbasiclti_v1p0.xsd';
  xml += '    http://www.imsglobal.org/xsd/imslticm_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imslticm_v1p0.xsd';
  xml += '    http://www.imsglobal.org/xsd/imslticp_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imslticp_v1p0.xsd">';
  xml += '    <blti:title>Asset Library</blti:title>';
  xml += '    <blti:description>The asset library to display all submissions of all students</blti:description>';
  xml += '    <blti:icon></blti:icon>';
  xml += '    <blti:launch_url>' + url + '/lti/assetlibrary</blti:launch_url>';
  xml += '    <blti:extensions platform="canvas.instructure.com">';
  xml += '      <lticm:property name="tool_id">collabosphere_assetlibrary</lticm:property>';
  xml += '      <lticm:property name="privacy_level">public</lticm:property>';
  xml += '      <lticm:options name="course_navigation">';
  xml += '        <lticm:property name="url">' + url + '/lti/assetlibrary</lticm:property>';
  xml += '        <lticm:property name="text">Asset Library</lticm:property>';
  xml += '        <lticm:property name="visibility">public</lticm:property>';
  xml += '        <lticm:property name="default">disabled</lticm:property>';
  xml += '        <lticm:property name="enabled">false</lticm:property>';
  xml += '      </lticm:options>';
  xml += '    </blti:extensions>';
  xml += '    <cartridge_bundle identifierref="BLTI001_Bundle"/>';
  xml += '    <cartridge_icon identifierref="BLTI001_Icon"/>';
  xml += '</cartridge_basiclti_link>';

  return xml;
};
