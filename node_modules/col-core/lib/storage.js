/**
 * Copyright Â©2016. The Regents of the University of California (Regents). All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its documentation
 * for educational, research, and not-for-profit purposes, without fee and without a
 * signed licensing agreement, is hereby granted, provided that the above copyright
 * notice, this paragraph and the following two paragraphs appear in all copies,
 * modifications, and distributions.
 *
 * Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
 * Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
 * http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.
 *
 * IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
 * "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 */

var _ = require('lodash');
var AWS = require('./aws-sdk-factory');
var config = require('config');
var fs = require('fs');
var log = require('./logger')('col-core/storage');
var mime = require('mime');
var moment = require('moment-timezone');
var path = require('path');
var timezone = config.get('timezone');
var util = require('util');

var bucket = config.get('aws.s3.bucket');

var s3 = AWS.S3(bucket);

/**
 * Delete file object from AWS S3
 *
 * @param  {Object}         objectKey             S3 Object Key unique to a file asset
 * @param  {Function}       callback              Standard callback function
 * @param  {Object}         callback.err          An error that occurred, if any
 */
var deleteS3Object = module.exports.deleteS3Object = function(objectKey, callback) {
  var params = {
    'Bucket': bucket,
    'Key': objectKey
  };

  log.info({'key': objectKey}, 'Delete file in AWS S3');
  s3.deleteObject(params, function(err, data) {
    if (err) {
      log.error({'err': err, 'key': objectKey}, 'Failed to delete file in AWS S3');
      return callback(err);
    }

    return callback();
  });
};

/**
 * Store file in Amazon S3 and record Object Key
 *
 * @param  {Context}    courseId                The id of the current course
 * @param  {String}     filePath                The path of the file that should be uploaded
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error object, if any
 * @param  {String}     callback.key            S3 Object Key of newly uploaded file
 * @param  {String}     callback.contentType    Mime-type assigned to the uploaded file
 */
var storeAsset = module.exports.storeAsset = function(courseId, filePath, callback) {
  // S3 key begins with reversed course id (padded for readability). Performance implications in URL above.
  var key = util.format('%s/%s/%s', reverseAndPad(courseId, 7), 'assets', filenameForS3(filePath, true));

  putObjectToS3(key, filePath, callback, function(err, objectKey, contentType) {
    if (err) {
      log.error({'err': err, 'course': courseId, 'filePath': filePath}, 'Failed to upload asset (file) to AWS S3');
      return callback(err);
    }

    return callback(null, objectKey, contentType);
  });
};

/**
 * Store whiteboard image file in Amazon S3 and record Object Key
 *
 * @param  {Context}    whiteboard              The whiteboard of which image belongs
 * @param  {String}     imagePath               The path of the image that should be uploaded
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error object, if any
 * @param  {String}     callback.key            S3 Object Key of newly uploaded file
 * @param  {String}     callback.contentType    Mime-type assigned to the uploaded file
 */
var storeWhiteboardImage = module.exports.storeWhiteboardImage = function(whiteboard, imagePath, callback) {
  // S3 key begins with reversed course id (padded for readability). Performance implications in URL above.
  var key = util.format('%s/%s/%d/%s', reverseAndPad(whiteboard.course_id, 7), 'whiteboard', whiteboard.id, filenameForS3(imagePath, false));

  putObjectToS3(key, imagePath, callback, function(err, objectKey, contentType) {
    if (err) {
      log.error({'err': err, 'whiteboard': whiteboard.id, 'imagePath': imagePath}, 'Failed to upload whiteboard image file to AWS S3');
      return callback(err);
    }

    return callback(null, objectKey, contentType);
  });
};

/**
 * Course is eligible for AWS S3 storage based on created_at date.
 *
 * @param  {Course}         course          The Canvas course in which the user is interacting with the API
 * @return {Boolean}                        True if course is eligible to store assets in AWS S3
 */
var useAmazonS3 = module.exports.useAmazonS3 = function(course) {
  var s3CutoverDate = moment(config.get("aws.s3.cutoverDate"), "YYYY-MM-DD");
  return s3CutoverDate.isValid() && moment(course.created_at).startOf('day').diff(s3CutoverDate, 'days') >= 0;
};

/**
 * Get object from Amazon S3
 *
 * @param  {String}     key                         Intended to be an Object Key in AWS S3
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.data               Data returned from Amazon S3
 */
var getObjectFromS3 = module.exports.getObjectFromS3 = function(key, callback) {
  var params = {
    'Bucket': bucket,
    'Key': key
  };

  return callback(s3.getObject(params));
};

/**
 * Get object metadata from Amazon S3
 *
 * @param  {String}     key                         Intended to be an Object Key in AWS S3
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error object, if any
 * @param  {Object}     callback.data               Metadata returned from Amazon S3
 */
var getObjectMetadataFromS3 = module.exports.getObjectMetadataFromS3 = function(key, callback) {
  var params = {
    'Bucket': bucket,
    'Key': key
  };

  s3.headObject(params, function(err, metadata) {
    if (err) {
      return callback(err);
    }

    return callback(null, metadata);
   });
};

/**
 * Store file in Amazon S3
 *
 * @param  {String}     key                         Intended to be an Object Key in AWS S3
 * @param  {String}     filePath                    The path of the file that should be uploaded
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error object, if any
 * @param  {String}     callback.key                The new AWS S3 Object Key of asset
 * @param  {String}     callback.contentType        Mime-type assigned to the uploaded file
 * @api private
 */
var putObjectToS3 = function(key, filePath, callback) {
  var contentType = mime.lookup(filePath);
  var params = {
    'Body': fs.createReadStream(filePath),
    'Bucket': bucket,
    'CacheControl': 'max-age=232000000',
    'ContentType': contentType,
    'Key': key
  };

  log.info({'key': key}, 'Put file to AWS S3');
  s3.putObject(params, function(err, data) {
    if (err) {
      log.error({'err': err, 'key': key, 'filePath': filePath}, 'Unable to put file in AWS S3');
      return callback(err);
    }

    // Generate a signed download URL
    var expires = 2 * 365 * 24 * 60 * 60;

    return s3.getObject({'Bucket': bucket, 'Key': key}, function(err, url) {
      if (err) {
        var msg = 'Failed to confirm the validity of AWS S3 Object Key';

        log.error({'err': err, 'bucket': bucket, 'key': key}, msg);
        return callback({'code': 500, 'msg': msg});
      }

      return callback(null, key, contentType);
    });
  });
};

/**
 * Based on S3 best practices, we transform the id in a reproducible way
 *
 * @param  {String}     id                    Course id or similar; an identifier
 * @param  {Number}     padToLength           Desired length of result
 * @return {String}                           Deterministic transformation of id
 * @api private
 */
var reverseAndPad = function(id, padToLength) {
  // S3 key naming best practices: http://docs.aws.amazon.com/AmazonS3/latest/dev/request-rate-perf-considerations.html
  var idReversed = _.toString(id).split('').reverse().join('');
  return _.padStart(idReversed, padToLength, '0');
};

/**
 * Construct key name for Amazon S3
 *
 * @param  {String}     filePath                    The path to file on disk
 * @param  {Boolean}    prependTimestamp            If true then S3 Object Key will get timestamp in name
 * @api private
 */
var filenameForS3 = function(filePath, prependTimestamp) {
  var fileExtension = path.extname(filePath);
  var filename = path.basename(filePath, fileExtension);

  filename = _.snakeCase(filename) + fileExtension;
  if (prependTimestamp) {
    var timestamp = moment().tz(timezone).format('YYYY-MM-DD_HHmmss');
    filename = timestamp + '-' + filename;
  }

  return filename;
};
