/**
 * Copyright Â©2016. The Regents of the University of California (Regents). All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its documentation
 * for educational, research, and not-for-profit purposes, without fee and without a
 * signed licensing agreement, is hereby granted, provided that the above copyright
 * notice, this paragraph and the following two paragraphs appear in all copies,
 * modifications, and distributions.
 *
 * Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
 * Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
 * http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.
 *
 * IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
 * "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 */

var _ = require('lodash');
var AWS = require('aws-sdk');
var config = require('config');
var fs = require('fs');
var log = require('./logger')('col-core/storage');
var mime = require('mime');
var path = require('path');

var bucket = config.get('aws.s3.bucket');

var s3 = new AWS.S3({
  'accessKeyId': config.get('aws.credentials.accessKeyId'),
  'secretAccessKey': config.get('aws.credentials.secretAccessKey'),
  'region': config.get('aws.s3.region'),
  'apiVersion': config.get('aws.s3.version'),
  'params': {
    'Bucket': bucket
  }
});

/**
 * Store file in Amazon S3
 *
 * @param  {Context}    ctx                 Standard context containing the current user and the current course
 * @param  {String}     assetId             The asset id associated with file
 * @param  {String}     filePath            The path of the file that should be uploaded
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {String}     callback.url        The HTTP URL where the file can be downloaded from
 */
var storeAsset = module.exports.storeAsset = function(ctx, assetId, filePath, callback) {
  // S3 key naming best practices: http://docs.aws.amazon.com/AmazonS3/latest/dev/request-rate-perf-considerations.html
  var reverseCourseId = _.toString(ctx.course.id).split('').reverse().join('');
  var fileExtension = path.extname(filename);
  var filename = path.basename(file, fileExtension);

  // S3 key begins with reversed course id (padded for readability). Performance implications in URL above.
  var key = util.format(
    '%s/%s/%s',
    _.padStart(reverseCourseId, 7, '0'),
    'asset-' + assetId,
    _.snakeCase(filename) + fileExtension);

  var putParams = {
    'Body': fs.createReadStream(file),
    'Bucket': bucket,
    'CacheControl': 'max-age=232000000',
    'ContentType': mime.lookup(filePath),
    'Key': key
  };

  s3.putObject(putParams, function(err) {
    if (err) {
      log.error({'err': err, 'asset': assetId, 'course': ctx.course.id}, 'Unable to store course asset in S3');
      return callback(err);
    }

    // Generate a signed download URL
    var expires = 2 * 365 * 24 * 60 * 60;

    return s3.getSignedUrl('getObject', {'Bucket': bucket, 'Expires': expires, 'Key': key}, function(err, url) {
      if (err) {
        var msg = 'Unable to generate a signed URL for file stored in S3';

        log.error({'err': err, 'asset': assetId, 'course': ctx.course.id}, msg);
        return callback({'code': 500, 'msg': msg});
      }

      return callback(null, url);
    });
  });

  /**
   * Course is eligible for AWS S3 storage based on created_at date.
   *
   * @param  {Course}         course          The Canvas course in which the user is interacting with the API
   * @return {Boolean}                        True if course is eligible to store assets in AWS S3
   */
  var useAmazonS3 = module.exports.useAmazonS3 = function(course) {
    var s3CutoverDate = moment(config.get("aws.s3.cutoverDate"), "YYYY-MM-DD");
    return s3CutoverDate.isValid() && moment(ctx.course.created_at).startOf('day').diff(s3CutoverDate, 'days') >= 0;
  };
};
