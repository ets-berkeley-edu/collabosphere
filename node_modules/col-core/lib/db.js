/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var config = require('config');
var Sequelize = require('sequelize');

var log = require('./logger')('col-core/db');

// A sequelize instance that will be connected to the database
var sequelize = null;

/**
 * Initialize the database and the Collabosphere models
 *
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var init = module.exports.init = function(callback) {
  var sequelizeConfig = {
    'dialect': 'postgres',
    'logging': function(msg) {
      log.debug(msg);
    }
  };

  // Set up a connection to the database
  sequelize = new Sequelize(config.get('db.database'), config.get('db.username'), config.get('db.password'), sequelizeConfig);

  sequelize.authenticate().done(function(err) {
    if (err) {
      log.error({'err': err}, 'Unable to set up a connection to the database');
      return callback({'code': 500, 'msg': 'Unable to set up a connection to the database'});
    }

    log.debug('Connected to the database');

    // Set up the model
    setUpModel(sequelize);

    // By setting `force` to `true` we will drop each table and recreate it. This is useful
    // during development/testing when models tend to change. We NEVER do this in production though
    var force = false;
    if (process.env.NODE_ENV !== 'production' && config.get('db.dropOnStartup') === true) {
      force = true;
    }

    sequelize.sync({'force': force}).done(function(err) {
      if (err) {
        log.error({'err': err}, 'Unable to sync the model to the database');
        return callback({'code': 500, 'msg': 'Unable to sync the model to the database'});
      }

      log.debug('Synced model to database');

      return callback();
    });
  });
};

/**
 * Set up the DB model
 *
 * @param  {Sequelize}      sequelize       A sequelize instance that is connected to the database
 * @api private
 */
var setUpModel = function(sequelize) {

  /**
   * The Course model
   *
   * @property  {Number}      id                      The id of the course
   */
  var Course = module.exports.Course = sequelize.define('Course', {
    'id': {
      'type': Sequelize.INTEGER,
      'allowNull': false,
      'unique': true,
      'primaryKey': true
    }
  });

  // TODO: Other DB models

};
