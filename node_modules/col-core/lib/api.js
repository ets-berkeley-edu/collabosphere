/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var config = require('config');
var express = require('express');
var fs = require('fs');
var path = require('path');
var util = require('util');

var DB = require('./db');
var Modules = require('./modules');
var Server = require('./server');

var log = require('./logger')('col-core');

/**
 * Initialize the Collabosphere LTI tools
 *
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var init = module.exports.init = function(callback) {
  // Initialize the database
  DB.init(function() {
    // Initialize the modules
    Modules.init(function() {
      // Initialize the Express server
      initializeServer(callback);
    });
  });
};

/**
 * Initialize the Collabosphere app server and initialize the REST API endpoints
 *
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @api private
 */
var initializeServer = function(callback) {
  // Initialize the Express server
  var appServer = module.exports.appServer = Server.setUpServer();

  // A router for all routes on /lti
  var ltiRouter = module.exports.ltiRouter = express.Router();
  appServer.use('/lti', ltiRouter);

  // A router for all routes on /api/courses/:api_domain_course_id
  var apiRouter = module.exports.apiRouter = express.Router();

  // This middleware will check if the user is authorized to interact with the given course
  apiRouter.use(function(req, res, next) {
    // The base URL in this middleware will be /api/courses/ucberkeley.canvas.com~21312
    // Unfortunately, express doesn't parse the api_domain and course in middleware, so
    // we need to do some manual string mangling
    var apiDomainCourseId = req.baseUrl.substring(13);
    var apiDomain = apiDomainCourseId.split('~')[0];
    var courseId = apiDomainCourseId.split('~')[1];

    // Get the user id from the client's cookies
    var cookieName = apiDomain + '_' + courseId;
    var userId = req.signedCookies[cookieName];

    // If no user id could be found, we bail out immediately
    if (!userId) {
      return res.status(401).send('Incorrect cookie information present');
    }

    // Get the user from the database so it can be made available on the request
    var options = {
      'where': {
        'id': userId
      },
      'include': [DB.Course]
    };
    DB.User.findOne(options).complete(function(err, user) {
      if (err) {
        return res.status(500).send('Failed to look up a user');
      } else if (!user) {
        return res.status(401).send('Failed to find a user');
      }

      // Create a context on the request that contains some information
      // about the user, domain and course
      req.ctx = {
        'user': user,
        'apiDomain': apiDomain,
        'course_id': courseId,
        'course': user.course
      };
      return next();
    });
  });

  // Add the api router
  appServer.use('/api/courses/:apidomain', apiRouter);

  // Check if a `rest.js` file exists in the `lib` folder in each
  // module. If such a file exists, we require it. This allows other
  // modules to add in their own REST apis
  var collabosphereModules = Modules.getAvailableModules();
  _.each(collabosphereModules, function(module) {
    var restFile = path.join(__dirname, '../..', module, '/lib/rest.js');
    if (fs.existsSync(restFile)) {
      log.debug({'module': module}, util.format('Registering REST APIs for %s', module));
      require(module + '/lib/rest');
    }
  });
  log.info('Finished initializing REST APIs');

  return callback();
};
