/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var randomstring = require('randomstring');

var DB = require('col-core/lib/db');
var log = require('col-core/lib/logger')('col-users');

/**
 * Get a user by their id
 *
 * @param  {Number}       id                  The id of the user
 * @param  {Function}     callback            Standard callback function
 * @param  {Object}       callback.err        An error object, if any
 * @param  {User}         callback.user       The retrieved user
 */
var getUser = module.exports.getUser = function(id, callback) {
  // TODO: Validation

  var options = {
    'where': {
      'id': id
    },
    'include': [DB.Course]
  };
  DB.User.findOne(options).complete(function(err, user) {
    if (err) {
      log.error({'err': err}, 'Failed to get a user');
      return callback({'code': 500, 'msg': 'Failed to get a user'});
    } else if (!user) {
      return callback({'code': 404, 'msg': 'Failed to find a user'});
    }

    return callback(null, user);
  });
};

/**
 * Get or create a user
 *
 * @param  {Number}     canvasUserId                    The id of the user in Canvas
 * @param  {Course}     course                          The course the user belongs to
 * @param  {Object}     defaults                        A set of properties to create the user object with
 * @param  {String}     defaults.canvas_course_role     The role of the user in the course
 * @param  {String}     defaults.canvas_full_name       The full name of the user
 * @param  {String}     defaults.canvas_image           A URL that points to an image for the user
 * @param  {Function}   callback                        Standard callback function
 * @param  {Object}     callback.err                    An error object, if any
 * @paran  {User}       callback.user                   The retrieved or created user
 */
var getOrCreateUser = module.exports.getOrCreateUser = function(canvasUserId, course, defaults, callback) {
  // TODO: Validation

  defaults.bookmarklet_token = defaults.bookmarklet_token || randomstring.generate();

  options = {
    'where': {
      'canvas_user_id': canvasUserId,
      'course_id': course.id
    },
    'defaults': defaults
  };
  DB.User.findOrCreate(options).complete(function(err, data) {
    if (err) {
      log.error({'err': err}, 'Failed to get or create a user');
      return callback({'code': 500, 'msg': 'Failed to get or create a user'});
    }

    var user = data[0];
    var wasCreated = data[1];
    if (wasCreated) {
      log.info({'id': user.id}, 'Created a new user');
    }

    return callback(null, user);
  });
};
