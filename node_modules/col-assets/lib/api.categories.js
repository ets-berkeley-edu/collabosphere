/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * Get the categories for the current course
 *
 * @param  {Context}        ctx                         Standard context containing the current user and the current course
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error that occurred, if any
 * @param  {Category[]}     callback.categories         The categories in the current course
 */
var getCategories = module.exports.getCategories = function(ctx, callback) {
  // Get the categories from the DB
  var options = {
    'where': {
      'course_id': ctx.course.id
    }
  };

  DB.Category.findAll(options).complete(function(err, categories) {
    if (err) {
      log.error({'err': err, 'course': ctx.course}, 'Failed to get the categories in the current course');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback(null, categories);
  });
};

/**
 * Create a new category
 *
 * @param  {Context}        ctx                         Standard context containing the current user and the current course
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error that occurred, if any
 * @param  {Category}       callback.category           The created category
 */
var createCategory = module.exports.createCategory = function(ctx, title, canvasAssignmentId, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'title': Joi.string().required(),
    'canvasAssignmentId': Joi.number().optional()
  });

  var validationResult = Joi.validate({
    'title': title,
    'canvasAssignmentId': canvasAssignmentId
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Create the category in the DB
  var category = {
    'title': ctx.course.id,
    'user_id': ctx.user.id,
    'type': 'link',
    'title': title,
    'url': url,
    'description': opts.description,
    'source': opts.source
  };
};
