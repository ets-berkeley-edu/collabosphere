/**
* Copyright Â©2017. The Regents of the University of California (Regents). All Rights Reserved.
*
* Permission to use, copy, modify, and distribute this software and its documentation
* for educational, research, and not-for-profit purposes, without fee and without a
* signed licensing agreement, is hereby granted, provided that the above copyright
* notice, this paragraph and the following two paragraphs appear in all copies,
* modifications, and distributions.
*
* Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
* Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
* http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.
*
* IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
* INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
* THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
*
* REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
* SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
* "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
* ENHANCEMENTS, OR MODIFICATIONS.
*/

var assert = require('assert');
var randomstring = require('randomstring');

var AssetsTestUtil = require('./util');
var CollabosphereConstants = require('col-core/lib/constants');
var TestsUtil = require('col-tests');
var UsersAPI = require('col-users');
var UsersTestUtil = require('col-users/tests/util');

describe('Bookmarklet', function() {

  /**
   * Test that verifies that a new link asset can be created through the Bookmarklet
   */
  it('can be created', function(callback) {
    TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
      UsersTestUtil.assertGetMe(client, course, null, function(me) {
        var bookmarkletClient = TestsUtil.getAnonymousClient();

        // Create a link asset with no optional metadata
        AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Create a link asset with no title. This should default the title to the provided URL
          var url = 'http://uci.edu';
          AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, me.id, me.bookmarklet_token, null, url, null, function(asset) {
            assert.equal(asset.title, url);

            // Create a link asset with optional metadata
            var opts = {
              'description': 'University of California, Berkeley homepage',
              'source': 'http://www.universityofcalifornia.edu/uc-system'
            };
            AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', opts, function(asset) {

              return callback();
            });
          });
        });
      });
    });
  });

  /**
   * Test that verifies validation when creating a new link asset through the Bookmarklet
   */
  it('is validated', function(callback) {
    TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
      UsersTestUtil.assertGetMe(client, course, null, function(me) {
        var bookmarkletClient = TestsUtil.getAnonymousClient();

        // Too long title
        AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, randomstring.generate(256), 'http://www.berkeley.edu/', null, 400, function() {

          // Missing URL
          AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', null, null, 400, function() {
            // Invalid URL
            AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'invalid url', null, 400, function() {
              AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', '/invalidurl', null, 400, function() {
                // Too long URL
                AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/?q=' + randomstring.generate(229), null, 400, function() {

                  // Invalid source
                  AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', {'source': 'invalid url'}, 400, function() {
                    AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', {'source': '/invalidurl'}, 400, function() {

                      return callback();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  /**
   * Test that verifies authorization when creating a new link asset through the Bookmarklet
   */
  it('verifies bookmarklet token authorization', function(callback) {
    TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
      UsersTestUtil.assertGetMe(client, course, null, function(me) {
        var bookmarkletClient = TestsUtil.getAnonymousClient();

        // Missing token and user id
        AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, null, null, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {
          // Missing token
          AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, null, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {
            // Missing user id
            AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, null, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {

              // Incorrect token
              TestsUtil.getAssetLibraryClient(null, course, null, function(otherClient, course, otherUser) {
                UsersTestUtil.assertGetMe(otherClient, course, null, function(otherMe) {
                  AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, otherMe.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {
                    // Incorrect user id
                    AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, otherMe.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {

                      // Ensure that the second user can create a new link asset through the Bookmarklet as well
                      AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, otherMe.id, otherMe.bookmarklet_token, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

                        return callback();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  /**
   * Test that verifies that only active users can add assets through the Bookmarklet
   */
  it('verifies only active users can add assets through bookmarklet', function(callback) {
    TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
      UsersTestUtil.assertGetMe(client, course, null, function(me) {
        var bookmarkletClient = TestsUtil.getAnonymousClient();

        // Verify the user is able to create an asset through the bookmarklet while still enrolled
        AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Change the enrollment state of the user and verify that adding an asset
          // through the bookmarklet is no longer possible
          UsersAPI.updateUsers([me.id], {'canvas_enrollment_state': CollabosphereConstants.ENROLLMENT_STATE.COMPLETED}, function(err) {
            assert.ok(!err);
            AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.ucberkeley.edu/', null, 401, function() {

              UsersAPI.updateUsers([me.id], {'canvas_enrollment_state': CollabosphereConstants.ENROLLMENT_STATE.INACTIVE}, function(err) {
                assert.ok(!err);
                AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.ucberkeley.edu/', null, 401, function() {

                  UsersAPI.updateUsers([me.id], {'canvas_enrollment_state': CollabosphereConstants.ENROLLMENT_STATE.INVITED}, function(err) {
                    assert.ok(!err);
                    AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.ucberkeley.edu/', null, 401, function() {

                      UsersAPI.updateUsers([me.id], {'canvas_enrollment_state': CollabosphereConstants.ENROLLMENT_STATE.REJECTED}, function(err) {
                        assert.ok(!err);
                        AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.ucberkeley.edu/', null, 401, function() {

                          // Verify that only the first asset has been created
                          AssetsTestUtil.assertGetAssets(client, course, null, null, null, null, 1, function(assets) {
                            assert.ok(assets.results[0].id);
                            assert.strictEqual(assets.results[0].id, asset.id);

                            return callback();
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});
