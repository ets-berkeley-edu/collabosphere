/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');

var CollabosphereConstants = require('col-core/lib/constants');

/**
 * Assert that an asset has all expected properties
 *
 * @param  {Asset}              asset               The asset to assert the properties for
 * @param  {Asset}              [expectedAsset]     The asset to which the provided asset should be compared
 * @param  {Boolean|Number}     [expectedComments]  The total number of comments that are expected on the asset. `false` if no comments are expected to be returned
 * @param  {Boolean}            [incrementViews]    Whether the total number of views for the asset was increased when retrieving the asset
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertAsset = module.exports.assertAsset = function(asset, expectedAsset, expectedComments, incrementViews) {
  // Ensure that all expected properties are present
  assert.ok(asset);
  assert.ok(asset.id);
  assert.ok(asset.type);
  assert(CollabosphereConstants.ASSET.ASSET_TYPES.indexOf(asset.type) !== -1)
  assert.ok(asset.course_id);
  assert.ok(asset.user_id);
  assert.ok(asset.title);
  assert.ok(asset.created_at);
  assert.ok(asset.updated_at);
  assert.ok(_.isFinite(asset.likes));
  assert.ok(_.isFinite(asset.dislikes));
  assert.ok(_.isFinite(asset.views));
  assert.ok(_.isFinite(asset.comment_count));

  // Ensure that all expected comments are present
  if (_.isFinite(expectedComments)) {
    assert.ok(_.isArray(asset.comments));
    assert.strictEqual(asset.comments.length, expectedComments);
    _.each(asset.comments, function(comment) {
      assertComment(comment);
    });
  } else {
    assert.ok(_.isUndefined(asset.comments));
  }

  // Ensure that all the asset properties are the same as the ones for
  // the expected asset
  if (expectedAsset) {
    assert.strictEqual(asset.id, expectedAsset.id);
    assert.strictEqual(asset.type, expectedAsset.type);
    assert.strictEqual(asset.course_id, expectedAsset.course_id);
    assert.strictEqual(asset.user_id, expectedAsset.user_id);
    assert.strictEqual(asset.title, expectedAsset.title);
    assert.strictEqual(asset.created_at, expectedAsset.created_at);
    assert.strictEqual(asset.likes, expectedAsset.likes);
    assert.strictEqual(asset.dislikes, expectedAsset.dislikes);
    assert.strictEqual(asset.comment_count, expectedAsset.comment_count);
    assert.strictEqual(asset.liked, expectedAsset.liked);

    // Ensure that the last modified timestamp has been updated when incrementing the views
    if (incrementViews) {
      assert(asset.updated_at > expectedAsset.updated_at);
    } else {
      assert.strictEqual(asset.updated_at, expectedAsset.updated_at);
    }

    // Ensure that the number of views has the expected value
    if (incrementViews) {
      assert.strictEqual(asset.views, expectedAsset.views + 1);
    } else {
      assert.strictEqual(asset.views, expectedAsset.views);
    }

    // Ensure that all optional properties are the same as the ones for the
    // expected asset
    if (asset.canvas_assignment_id || expectedAsset.canvas_assignment_id) {
      assert.strictEqual(asset.canvas_assignment_id, expectedAsset.canvas_assignment_id);
    }
    if (asset.description || expectedAsset.description) {
      assert.strictEqual(asset.description, expectedAsset.description);
    }
    if (asset.thumbnail_url || expectedAsset.thumbnail_url) {
      assert.strictEqual(asset.thumbnail_url, expectedAsset.thumbnail_url);
    }
    if (asset.large_url || expectedAsset.large_url) {
      assert.strictEqual(asset.large_url, expectedAsset.large_url);
    }
    if (asset.mime || expectedAsset.mime) {
      assert.strictEqual(asset.mime, expectedAsset.mime);
    }
    if (asset.source || expectedAsset.source) {
      assert.strictEqual(asset.source, expectedAsset.source);
    }
  }

  // Ensure that all link specific properties are present
  if (asset.type === 'link') {
    assert.ok(asset.url);
    if (expectedAsset) {
      assert.strictEqual(asset.url, expectedAsset.url);
    }
  }

  // Ensure that all file specific properties are present
  if (asset.type === 'file') {
    assert.ok(asset.downloadPath);
    assert.ok(asset.mime);
    if (expectedAsset) {
      assert.strictEqual(asset.downloadPath, expectedAsset.downloadPath);
      assert.strictEqual(asset.mime, expectedAsset.mime);
    }
  }

  // Ensure that all thought specific properties are present
  if (asset.type === 'thought') {
    assert.ok(asset.body);
    if (expectedAsset) {
      assert.strictEqual(asset.body, expectedAsset.body);
    }
  }
};

/**
 * Assert that a comment has all expected properties
 *
 * @param  {Comment}            comment             The asset to assert the properties for
 * @param  {Comment}            [expectedComment]   The comment to which the provided comment should be compared
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertComment = module.exports.assertComment = function(comment, expectedComment) {
  // Ensure that all expected properties are present
  assert.ok(comment);
  assert.ok(comment.id);
  assert.ok(comment.user_id);
  assert.ok(comment.asset_id);
  assert.ok(comment.body);
  assert.ok(comment.user);
  assert.ok(comment.user.id);
  assert.strictEqual(comment.user_id, comment.user.id);
  assert.ok(comment.user.canvas_course_role);
  assert.ok(comment.user.canvas_full_name);
  assert.ok(comment.user.canvas_image);
  assert.ok(comment.user.id);
  assert.strictEqual(comment.user_id, comment.user.id);
  assert.ok(comment.user.canvas_course_role);
  assert.ok(comment.user.canvas_full_name);
  assert.ok(comment.user.canvas_image);

  // Ensure that all the comment properties are the same as the ones for
  // the expected comment
  if (expectedComment) {
    assert.strictEqual(comment.id, expectedComment.id);
    assert.strictEqual(comment.user_id, expectedComment.user_id);
    assert.strictEqual(comment.asset_id, expectedComment.asset_id);
    assert.strictEqual(comment.body, expectedComment.body);
    assert.strictEqual(comment.user.id, expectedComment.user.id);
    assert.strictEqual(comment.user.canvas_course_role, expectedComment.user.canvas_course_role);
    assert.strictEqual(comment.user.canvas_full_name, expectedComment.user.canvas_full_name);

    // Ensure that all optional properties are the same as the ones for the
    // expected comment
    if (comment.parent_id || expectedComment.parent_id) {
      assert.strictEqual(comment.parent_id, expectedComment.parent_id);
    }
    if (comment.user.canvas_image || expectedComment.user.canvas_image) {
      assert.strictEqual(comment.user.canvas_image, expectedComment.user.canvas_image);
    }
  }
};

/**
 * Assert that a new link asset can be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             title                           The title of the link
 * @param  {String}             url                             The url of the link
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {String}             [opts.description]              The description of the link
 * @param  {String}             [opts.source]                   The source of the link
 * @param  {Function}           callback                        Standard callback function
 * @param  {Asset}              callback.asset                  The created link asset
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateLink = module.exports.assertCreateLink = function(client, course, title, url, opts, callback) {
  opts = opts || {};

  client.assets.createLink(course, title, url, opts, function(err, asset, response) {
    assert.ok(!err);
    assert.ok(asset);
    assertAsset(asset);
    assert.strictEqual(asset.type, 'link');
    assert.strictEqual(asset.url, url);
    if (title) {
      assert.strictEqual(asset.title, title);
    } else {
      assert.strictEqual(asset.title, url);
    }

    if (opts.description) {
      assert.strictEqual(asset.description, opts.description);
    }
    if (opts.source) {
      assert.strictEqual(asset.source, opts.source);
    }

    return callback(asset);
  });
};

/**
 * Assert that a new link asset can not be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             title                           The title of the link
 * @param  {String}             url                             The url of the link
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {String}             [opts.description]              The description of the link
 * @param  {String}             [opts.source]                   The source of the link
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateLinkFails = module.exports.assertCreateLinkFails = function(client, course, title, url, opts, code, callback) {
  client.assets.createLink(course, title, url, opts, function(err, asset, response) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!asset);

    return callback();
  });
};

/**
 * Assert that a new link asset can be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             userId                          The id of the user creating the link
 * @param  {String}             bookmarkletToken                The bookmarklet access token for the user
 * @param  {String}             title                           The title of the link
 * @param  {String}             url                             The url of the link
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {String}             [opts.description]              The description of the link
 * @param  {String}             [opts.source]                   The source of the link
 * @param  {Function}           callback                        Standard callback function
 * @param  {Asset}              callback.asset                  The created link asset
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateLinkBookmarklet = module.exports.assertCreateLinkBookmarklet = function(client, course, userId, bookmarkletToken, title, url, opts, callback) {
  opts = opts || {};

  client.assets.bookmarklet.createLink(course, userId, bookmarkletToken, title, url, opts, function(err, asset, response) {
    assert.ok(!err);
    assert.ok(asset);
    assertAsset(asset);
    assert.strictEqual(asset.type, 'link');
    assert.strictEqual(asset.user_id, userId);
    assert.strictEqual(asset.url, url);
    if (title) {
      assert.strictEqual(asset.title, title);
    } else {
      assert.strictEqual(asset.title, url);
    }

    if (opts.description) {
      assert.strictEqual(asset.description, opts.description);
    }
    if (opts.source) {
      assert.strictEqual(asset.source, opts.source);
    }

    return callback(asset);
  });
};

/**
 * Assert that a new link asset can not be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             userId                          The id of the user creating the link
 * @param  {String}             bookmarkletToken                The bookmarklet access token for the user
 * @param  {String}             title                           The title of the link
 * @param  {String}             url                             The url of the link
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {String}             [opts.description]              The description of the link
 * @param  {String}             [opts.source]                   The source of the link
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateLinkBookmarkletFails = module.exports.assertCreateLinkBookmarkletFails = function(client, course, userId, bookmarkletToken, title, url, opts, code, callback) {
  client.assets.bookmarklet.createLink(course, userId, bookmarkletToken, title, url, opts, function(err, asset, response) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!asset);

    return callback();
  });
};

/**
 * Assert that an asset can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             id                              The id of the asset
 * @param  {Boolean}            [incrementViews]                Whether the total number of views for the asset should be incremented by 1
 * @param  {Asset}              [expectedAsset]                 The expected asset to be retrieved
 * @param  {Number}             [expectedComments]              The total number of comments that are expected on the asset
 * @param  {Function}           callback                        Standard callback function
 * @param  {Asset}              callback.asset                  The retrieved asset
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetAsset = module.exports.assertGetAsset = function(client, course, id, incrementViews, expectedAsset, expectedComments, callback) {
  client.assets.getAsset(course, id, incrementViews, function(err, asset) {
    assert.ok(!err);
    assert.ok(asset);
    assert.strictEqual(asset.id, id);
    assertAsset(asset, expectedAsset, expectedComments, incrementViews);

    return callback(asset);
  });
};

/**
 * Assert that an asset can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             id                              The id of the asset
 * @param  {Boolean}            [incrementViews]                Whether the total number of views for the asset should be incremented by 1
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetAssetFails = module.exports.assertGetAssetFails = function(client, course, id, incrementViews, code, callback) {
  client.assets.getAsset(course, id, incrementViews, function(err, asset) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!asset);

    return callback();
  });
};

/**
 * Assert that the assets for a course can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Number}             [offset]                        The number to start paging from. Defaults to 0
 * @param  {Number}             expectedTotal                   The expected total number of assets in the current course
 * @param  {Function}           callback                        Standard callback function
 * @param  {Object}             callback.assets                 The retrieved assets
 * @param  {Number}             callback.assets.total           The total number of assets in the current course
 * @param  {Asset[]}            callback.assets.results         The paged assets in the current course
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetAssets = module.exports.assertGetAssets = function(client, course, limit, offset, expectedTotal, callback) {
  client.assets.getAssets(course, limit, offset, function(err, assets) {
    assert.ok(!err);
    assert.ok(assets);
    assert.ok(assets.results);
    assert.ok(assets.results.length <= assets.total);
    assert.strictEqual(assets.total, expectedTotal);
    _.each(assets.results, function(asset) {
      assertAsset(asset);
    });

    return callback(assets);
  });
};

/**
 * Assert that the assets for a course can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Number}             [offset]                        The number to start paging from. Defaults to 0
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetAssetsFails = module.exports.assertGetAssetsFails = function(client, course, limit, offset, code, callback) {
  client.assets.getAssets(course, limit, offset, function(err, assets) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!assets);

    return callback();
  });
};

/**
 * Assert that a new comment can be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             assetId                         The id of the asset to which the comment is added
 * @param  {String}             body                            The body of the comment
 * @param  {Number}             [parent]                        The id of the asset to which the comment is a reply
 * @param  {Function}           callback                        Standard callback function
 * @param  {Comment}            callback.comment                The created comment
 * @param  {User}               callback.comment.user           The user that creted the comment
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateComment = module.exports.assertCreateComment = function(client, course, assetId, body, parent, callback) {
  client.assets.createComment(course, assetId, body, parent, function(err, comment) {
    assert.ok(!err);
    assert.ok(comment);
    assertComment(comment);
    assert.strictEqual(comment.asset_id, assetId);
    assert.strictEqual(comment.body, body);
    if (parent) {
      assert.strictEqual(comment.parent_id, parent);
    }

    return callback(comment);
  });
};

/**
 * Assert that a new comment can not be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             assetId                         The id of the asset to which the comment is added
 * @param  {String}             body                            The body of the comment
 * @param  {Number}             [parent]                        The id of the asset to which the comment is a reply
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateCommentFails = module.exports.assertCreateCommentFails = function(client, course, assetId, body, parent, code, callback) {
  client.assets.createComment(course, assetId, body, parent, function(err, comment) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!comment);

    return callback();
  });
};
