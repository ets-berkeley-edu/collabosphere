/**
 * Copyright Â©2017. The Regents of the University of California (Regents). All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its documentation
 * for educational, research, and not-for-profit purposes, without fee and without a
 * signed licensing agreement, is hereby granted, provided that the above copyright
 * notice, this paragraph and the following two paragraphs appear in all copies,
 * modifications, and distributions.
 *
 * Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
 * Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
 * http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.
 *
 * IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
 * "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 */

var _ = require('lodash');
var assert = require('assert');
var fs = require('fs');
var randomstring = require('randomstring');

var CategoriesTestUtil = require('col-categories/tests/util');
var CollabosphereConstants = require('col-core/lib/constants');
var DB = require('col-core/lib/db');
var TestsUtil = require('col-tests');
var UsersAPI = require('col-users');
var UsersTestUtil = require('col-users/tests/util');
var WhiteboardsTestUtil = require('col-whiteboards/tests/util');

var AssetsTestUtil = require('./util');

describe('Assets', function() {

  /**
   * Get course by Canvas course id
   *
   * @param  {Number}           canvasCourseId          The id of the course in Canvas
   * @param  {Function}         callback                Invoked when the course has been retrieved
   * @param  {Course}           callback.course         The retrieved course object
   * @throws {AssertionError}                           Error thrown when an assertion failed
   */
  var getCourse = function(canvasCourseId, callback) {
    var options = {
      'where': {
        'canvas_course_id': canvasCourseId
      },
      'include': [{
        'model': DB.Canvas,
        'as': 'canvas'
      }]
    };
    DB.Course.findOne(options).complete(function(err, course) {
      assert.ok(!err);
      assert.ok(course);

      return callback(course);
    });
  };

  /**
   * Get user from database via Canvas user data
   *
   * @param  {User}             canvasUser              The user of the course
   * @param  {Course}           course                  The course in Canvas
   * @param  {String[]}         sections                The sections of the course in which user is enrolled
   * @param  {Function}         callback                Invoked when the user has been retrieved
   * @param  {User}             callback.user           The retrieved user object
   * @throws {AssertionError}                           Error thrown when an assertion failed
   */
  var findUser = function(canvasUser, course, sections, callback) {
    var options = {
      'where': {
        'canvas_user_id': canvasUser.id
      }
    };
    DB.User.findOne(options).complete(function(err, user) {
      assert.ok(!err);

      var profile = {
        'canvas_course_role': canvasUser.roles,
        'canvas_full_name': canvasUser.fullName,
        'canvas_course_sections': sections
      };
      UsersAPI.getOrCreateUser(canvasUser.id, course, profile, function(err, user) {
        assert.ok(!err);

        callback(user);
      });
    });
  };

  /**
   * Get a file stream
   *
   * @param  {String}   filename    The name of the file in the `data` directory
   * @return {Stream}               A readable stream to the file on disk
   */
  var getFileStream = function(filename) {
    return fs.createReadStream(__dirname + '/data/' + filename);
  };

  /**
   * Utility function that verifies that searching through the assets returns the expected assets
   *
   * @param  {RestClient}         client                    The REST client to make the request with
   * @param  {Course}             course                    The Canvas course in which the user is interacting with the API
   * @param  {Object}             [filters]                 A set of options to filter the results by
   * @param  {String}             [filters.keywords]        A string to filter the assets by
   * @param  {Number}             [filters.category]        The id of the category to filter the assets by
   * @param  {Number}             [filters.user]            The id of the user who created the assets
   * @param  {String}             [filters.section]         The name of the section in which owners of the assets are enrolled
   * @param  {Number}             [filters.type]            The type of assets. One of `CollabosphereConstants.ASSET.ASSET_TYPES`
   * @param  {Boolean}            [filters.hasComments]     If true then exclude zero comment_count; if false then zero comment_count only; if null do nothing
   * @param  {Boolean}            [filters.hasImpact]       If true then exclude zero impact; if false then zero impact only; if null do nothing
   * @param  {Boolean}            [filters.hasLikes]        If true then exclude zero likes; if false then zero likes only; if null do nothing
   * @param  {Boolean}            [filters.hasViews]        If true then exclude zero views; if false then zero views only; if null do nothing
   * @param  {Asset[]}            expectedAssets            The expected assets
   * @param  {Function}           callback                  Standard callback function
   * @throws {AssertionError}                               Error thrown when an assertion failed
   * @api private
   */
  var verifySearch = function(client, course, filters, expectedAssets, callback) {
    AssetsTestUtil.assertGetAssets(client, course, filters, null, null, null, expectedAssets.length, function(assets) {
      expectedAssets = _.sortBy(expectedAssets, 'id').reverse();

      // We allow timestamp discrepancies; the alternative is to re-getAsset when, for example, comments are made on expectedAssets.
      AssetsTestUtil.assertAssets(assets, expectedAssets, expectedAssets.length, {'allowTimestampDiscrepancy': true});

      return callback();
    });
  };

  /**
   * Utility function that verifies that assets are returned in the expected sort order
   *
   * @param  {RestClient}         client                    The REST client to make the request with
   * @param  {Course}             course                    The Canvas course in which the user is interacting with the API
   * @param  {Object}             [filters]                 A set of options to filter the results by
   * @param  {String}             [filters.keywords]        A string to filter the assets by
   * @param  {Number}             [filters.category]        The id of the category to filter the assets by
   * @param  {Number}             [filters.user]            The id of the user who created the assets
   * @param  {Number}             [filters.type]            The type of assets. One of `CollabosphereConstants.ASSET.ASSET_TYPES`
   * @param  {String}             sort                      A criterion to sort by
   * @param  {Asset[]}            expectedAssets            The expected assets
   * @param  {Function}           callback                  Standard callback function
   * @throws {AssertionError}                               Error thrown when an assertion failed
   * @api private
   */
  var verifySort = function(client, course, filters, sort, expectedAssets, callback) {
    AssetsTestUtil.assertGetAssets(client, course, filters, sort, null, null, expectedAssets.length, function(assets) {
      // Impact scores applied after asset retrieval may have changed the updated_at timestamp.
      AssetsTestUtil.assertAssets(assets, expectedAssets, expectedAssets.length, {'allowTimestampDiscrepancy': true});

      return callback();
    });
  };

  describe('Create new assets', function() {

    describe('Links', function() {

      /**
       * Test that verifies that a new link asset can be created
       */
      it('can be created', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          // Create a link asset with no optional metadata
          AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

            // Create a link asset with no title. This should default the title to the provided URL
            var url = 'http://uci.edu';
            AssetsTestUtil.assertCreateLink(client, course, null, url, null, function(asset) {
              assert.equal(asset.title, url);

              // Create a link asset with optional metadata
              var opts = {
                'description': 'University of California, Berkeley homepage',
                'source': 'http://www.universityofcalifornia.edu/uc-system',
                'thumbnail_url': 'https://previews.s3.amazonaws.com/uploads/110198/352390/thumbnail.jpeg?AWSAccessKeyId=AKIAJ4WBDILJQGNGADIQ&Expires=1761522146&Signature=bU7ABJ8yyb9iX1zK3yvkTd1cl1s%3D',
                'image_url': 'https://previews.s3.amazonaws.com/uploads/110198/352390/image.jpeg?AWSAccessKeyId=AKIAJ4WBDILJQGNGADIQ&Expires=1761522146&Signature=bU7ABJ8yyb9iX1zK3yvkTd1cl1s%3D',
                'pdf_url': 'https://previews.s3.amazonaws.com/uploads/110198/352390/image.jpeg?AWSAccessKeyId=AKIAJ4WBDILJQGNGADIQ&Expires=1761522146&Signature=bU7ABJ8yyb9iX1zK3yvkTd1cl1s%3D',
                'metadata': '{"foo": "bar"}'
              };
              AssetsTestUtil.assertCreateLink(client, course, 'UC Berkeley', 'http://www.berkeley.edu/', opts, function(asset) {

                // Verify that `thumbnail_url`, `image_url`, `pdf_url` and `metadata`
                // were not set as these can only be set through the preview service
                assert.ok(!asset.thumbnail_url);
                assert.ok(!asset.image_url);
                assert.ok(!asset.pdf_url);
                assert.ok(!asset.metadata);

                return callback();
              });
            });
          });
        });
      });

      /**
       * Test that verifies validation when creating a new link asset
       */
      it('is validated', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          // Too long title
          AssetsTestUtil.assertCreateLinkFails(client, course, randomstring.generate(256), 'http://www.berkeley.edu/', null, 400, function() {

            // Missing URL
            AssetsTestUtil.assertCreateLinkFails(client, course, 'UC Berkeley', null, null, 400, function() {
              // Invalid URL
              AssetsTestUtil.assertCreateLinkFails(client, course, 'UC Berkeley', 'invalid url', null, 400, function() {
                AssetsTestUtil.assertCreateLinkFails(client, course, 'UC Berkeley', '/invalidurl', null, 400, function() {
                  // Too long URL
                  AssetsTestUtil.assertCreateLinkFails(client, course, 'UC Berkeley', 'http://www.berkeley.edu/?q=' + randomstring.generate(229), null, 400, function() {

                    return callback();
                  });
                });
              });
            });
          });
        });
      });
    });

    describe('File', function() {

      /**
       * Test that verifies that a new file asset can be created
       */
      it('can be created', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          // Create a file asset with no optional metadata
          AssetsTestUtil.assertCreateFile(client, course, 'UC Davis', getFileStream('logo-ucberkeley.png'), null, function(asset) {

            // Create a file asset with no title. This should default the title to the name of the file
            AssetsTestUtil.assertCreateFile(client, course, null, getFileStream('logo-ucberkeley.png'), null, function(asset) {
              assert.equal(asset.title, 'logo-ucberkeley.png');

              // Create a file asset with optional metadata
              var opts = {
                'description': 'University of California, Berkeley logo',
                'source': 'http://www.universityofcalifornia.edu/uc-system'
              };
              AssetsTestUtil.assertCreateFile(client, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), opts, function(asset) {

                return callback();
              });
            });
          });
        });
      });

      /**
       * Test that verifies validation when creating a new file asset
       */
      it('is validated', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          // Missing file
          AssetsTestUtil.assertCreateFileFails(client, course, 'UC Berkeley', null, null, 400, function() {
            // Invalid file
            AssetsTestUtil.assertCreateFileFails(client, course, 'UC Berkeley', 'invalid file', null, 400, function() {
              AssetsTestUtil.assertCreateFileFails(client, course, 'UC Berkeley', '42', null, 400, function() {

                // Invalid source
                AssetsTestUtil.assertCreateFileFails(client, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), {'source': 'invalid url'}, 400, function() {
                  AssetsTestUtil.assertCreateFileFails(client, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), {'source': '/invalidurl'}, 400, function() {

                    return callback();
                  });
                });
              });
            });
          });
        });
      });
    });

    describe('Bookmarklet', function() {

      /**
       * Test that verifies that a new link asset can be created through the Bookmarklet
       */
      it('can be created', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          UsersTestUtil.assertGetMe(client, course, null, function(me) {
            var bookmarkletClient = TestsUtil.getAnonymousClient();

            // Create a link asset with no optional metadata
            AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

              // Create a link asset with no title. This should default the title to the provided URL
              var url = 'http://uci.edu';
              AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, me.id, me.bookmarklet_token, null, url, null, function(asset) {
                assert.equal(asset.title, url);

                // Create a link asset with optional metadata
                var opts = {
                  'description': 'University of California, Berkeley homepage',
                  'source': 'http://www.universityofcalifornia.edu/uc-system'
                };
                AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', opts, function(asset) {

                  return callback();
                });
              });
            });
          });
        });
      });

      /**
       * Test that verifies validation when creating a new link asset through the Bookmarklet
       */
      it('is validated', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          UsersTestUtil.assertGetMe(client, course, null, function(me) {
            var bookmarkletClient = TestsUtil.getAnonymousClient();

            // Too long title
            AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, randomstring.generate(256), 'http://www.berkeley.edu/', null, 400, function() {

              // Missing URL
              AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', null, null, 400, function() {
                // Invalid URL
                AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'invalid url', null, 400, function() {
                  AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', '/invalidurl', null, 400, function() {
                    // Too long URL
                    AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/?q=' + randomstring.generate(229), null, 400, function() {

                      // Invalid source
                      AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', {'source': 'invalid url'}, 400, function() {
                        AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', {'source': '/invalidurl'}, 400, function() {

                          return callback();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });

      /**
       * Test that verifies authorization when creating a new link asset through the Bookmarklet
       */
      it('verifies bookmarklet token authorization', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          UsersTestUtil.assertGetMe(client, course, null, function(me) {
            var bookmarkletClient = TestsUtil.getAnonymousClient();

            // Missing token and user id
            AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, null, null, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {
              // Missing token
              AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, null, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {
                // Missing user id
                AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, null, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {

                  // Incorrect token
                  TestsUtil.getAssetLibraryClient(null, course, null, function(otherClient, course, otherUser) {
                    UsersTestUtil.assertGetMe(otherClient, course, null, function(otherMe) {
                      AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, otherMe.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {
                        // Incorrect user id
                        AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, otherMe.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.berkeley.edu/', null, 401, function() {

                          // Ensure that the second user can create a new link asset through the Bookmarklet as well
                          AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, otherMe.id, otherMe.bookmarklet_token, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

                            return callback();
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });

      /**
       * Test that verifies that only active users can add assets through the Bookmarklet
       */
      it('verifies only active users can add assets through bookmarklet', function(callback) {
        TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
          UsersTestUtil.assertGetMe(client, course, null, function(me) {
            var bookmarkletClient = TestsUtil.getAnonymousClient();

            // Verify the user is able to create an asset through the bookmarklet while still enrolled
            AssetsTestUtil.assertCreateLinkBookmarklet(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

              // Change the enrollment state of the user and verify that adding an asset
              // through the bookmarklet is no longer possible
              UsersAPI.updateUsers([me.id], {'canvas_enrollment_state': CollabosphereConstants.ENROLLMENT_STATE.COMPLETED}, function(err) {
                assert.ok(!err);
                AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.ucberkeley.edu/', null, 401, function() {

                  UsersAPI.updateUsers([me.id], {'canvas_enrollment_state': CollabosphereConstants.ENROLLMENT_STATE.INACTIVE}, function(err) {
                    assert.ok(!err);
                    AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.ucberkeley.edu/', null, 401, function() {

                      UsersAPI.updateUsers([me.id], {'canvas_enrollment_state': CollabosphereConstants.ENROLLMENT_STATE.INVITED}, function(err) {
                        assert.ok(!err);
                        AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.ucberkeley.edu/', null, 401, function() {

                          UsersAPI.updateUsers([me.id], {'canvas_enrollment_state': CollabosphereConstants.ENROLLMENT_STATE.REJECTED}, function(err) {
                            assert.ok(!err);
                            AssetsTestUtil.assertCreateLinkBookmarkletFails(bookmarkletClient, course, me.id, me.bookmarklet_token, 'UC Berkeley', 'http://www.ucberkeley.edu/', null, 401, function() {

                              // Verify that only the first asset has been created
                              AssetsTestUtil.assertGetAssets(client, course, null, null, null, null, 1, function(assets) {
                                assert.ok(assets.results[0].id);
                                assert.strictEqual(assets.results[0].id, asset.id);

                                return callback();
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Get asset', function() {

    /**
     * Test that verifies that an asset can be retrieved
     */
    it('can be retrieved', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        // Create a link asset with no optional metadata
        AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {
          AssetsTestUtil.assertGetAsset(client, course, asset.id, asset, 0, function(asset) {

            // Create a link asset with optional metadata
            var opts = {
              'description': 'University of California, Berkeley homepage',
              'source': 'http://www.universityofcalifornia.edu/uc-system'
            };
            AssetsTestUtil.assertCreateLink(client, course, 'UC Berkeley', 'http://www.berkeley.edu/', opts, function(asset) {
              AssetsTestUtil.assertGetAsset(client, course, asset.id, asset, 0, function(asset) {

                // Create a file asset with no optional metadata
                AssetsTestUtil.assertCreateFile(client, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), null, function(asset) {
                  AssetsTestUtil.assertGetAsset(client, course, asset.id, asset, 0, function(asset) {

                    // Create a file asset with optional metadata
                    opts = {
                      'description': 'University of California, Berkeley logo',
                      'source': 'http://www.universityofcalifornia.edu/uc-system'
                    };
                    AssetsTestUtil.assertCreateFile(client, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), opts, function(asset) {
                      AssetsTestUtil.assertGetAsset(client, course, asset.id, asset, 0, function(asset) {

                        return callback();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies validation when retrieving an asset
     */
    it('is validated', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Invalid asset id
          AssetsTestUtil.assertGetAssetFails(client, course, 'Not a number', 400, function() {
            AssetsTestUtil.assertGetAssetFails(client, course, -1, 404, function() {
              AssetsTestUtil.assertGetAssetFails(client, course, 234234233, 404, function() {

                return callback();
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies authorization when retrieving an asset
     */
    it('verifies asset retrieval authorization', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Verify that a user from a different course is not able to retrieve the created asset
          TestsUtil.getAssetLibraryClient(null, null, null, function(otherClient, otherCourse, otherUser) {
            AssetsTestUtil.assertGetAssetFails(otherClient, otherCourse, asset.id, 404, function(asset) {

              return callback();
            });
          });
        });
      });
    });

    /**
     * Test that verifies that the total number of asset views is updated correctly
     */
    it('increments total number of views', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
          TestsUtil.getAssetLibraryClient(null, course, null, function(client3, course, user3) {
            AssetsTestUtil.assertCreateLink(client1, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {
              assert.strictEqual(asset.views, 0);

              // Verify the total number of views is incremented
              AssetsTestUtil.assertGetAsset(client2, course, asset.id, asset, 0, function(asset) {
                assert.strictEqual(asset.views, 1);

                // Verify the total number of views is incremented again when requested by a different user
                AssetsTestUtil.assertGetAsset(client3, course, asset.id, asset, 0, function(asset) {
                  assert.strictEqual(asset.views, 2);

                  // Verify the total number of views is not incremented when requested by asset creator
                  AssetsTestUtil.assertGetAsset(client1, course, asset.id, asset, 0, function(asset) {
                    assert.strictEqual(asset.views, 2);

                    return callback();
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Get assets', function() {

    /**
     * Test that verifies that the assets in a course can be retrieved
     */
    it('can be retrieved', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        // Retrieve the empty course asset list
        AssetsTestUtil.assertGetAssets(client1, course, null, null, null, null, 0, function(assets) {

          // Add a link and verify that is returned as part of the course asset list
          AssetsTestUtil.assertCreateLink(client1, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset1) {
            AssetsTestUtil.assertGetAssets(client1, course, null, null, null, null, 1, function(assets) {
              AssetsTestUtil.assertAsset(assets.results[0], {'expectedAsset': asset1});

              // Add another link as a second user and verify that is also returned as part of the course asset list
              TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
                AssetsTestUtil.assertCreateLink(client2, course, 'UC Berkeley', 'http://www.berkeley.edu/', null, function(asset2) {
                  AssetsTestUtil.assertGetAssets(client2, course, null, null, null, null, 2, function(assets) {
                    // The results are expected to return in descending creation date order
                    AssetsTestUtil.assertAsset(assets.results[0], {'expectedAsset': asset2});
                    AssetsTestUtil.assertAsset(assets.results[1], {'expectedAsset': asset1});

                    // Add a file and verify that it is returned as part of the course asset list
                    var opts = {
                      'description': 'University of California, Berkeley logo',
                      'source': 'http://www.universityofcalifornia.edu/uc-system'
                    };
                    AssetsTestUtil.assertCreateFile(client2, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), opts, function(asset3) {
                      AssetsTestUtil.assertGetAssets(client2, course, null, null, null, null, 3, function(assets) {
                        // The results are expected to return in descending creation date order
                        AssetsTestUtil.assertAsset(assets.results[0], {'expectedAsset': asset3});
                        AssetsTestUtil.assertAsset(assets.results[1], {'expectedAsset': asset2});
                        AssetsTestUtil.assertAsset(assets.results[2], {'expectedAsset': asset1});

                        return callback();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that the assets in a course can be paged
     */
    it('can be paged', function(callback) {
      // Generate a number of test assets for a course
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        TestsUtil.generateTestAssets(client, course, 12, function(assets) {

          // The results are expected to return in descending creation date order
          assets = _.sortBy(assets, 'id').reverse();

          // Verify that the page size defaults to 10 and the page defaults to the first page
          AssetsTestUtil.assertGetAssets(client, course, null, null, null, null, 12, function(pagedAssets) {
            AssetsTestUtil.assertAssets(pagedAssets, _.slice(assets, 0, 10), 12);

            // Verify that the second page can be retrieved
            AssetsTestUtil.assertGetAssets(client, course, null, null, null, 10, 12, function(pagedAssets) {
              AssetsTestUtil.assertAssets(pagedAssets, _.slice(assets, 10, 12), 12);

              // Verify that a custom page size can be specified
              AssetsTestUtil.assertGetAssets(client, course, null, null, 5, null, 12, function(pagedAssets) {
                AssetsTestUtil.assertAssets(pagedAssets, _.slice(assets, 0, 5), 12);
                // Get the second page using the custom page size
                AssetsTestUtil.assertGetAssets(client, course, null, null, 5, 5, 12, function(pagedAssets) {
                AssetsTestUtil.assertAssets(pagedAssets, _.slice(assets, 5, 10), 12);
                  // Get the last page using the custom page size
                  AssetsTestUtil.assertGetAssets(client, course, null, null, 5, 10, 12, function(pagedAssets) {
                    AssetsTestUtil.assertAssets(pagedAssets, _.slice(assets, 10, 12), 12);
                    // Verify that further pages will be empty
                    AssetsTestUtil.assertGetAssets(client, course, null, null, 5, 15, 12, function(pagedAssets) {
                      AssetsTestUtil.assertAssets(pagedAssets, [], 12);

                      return callback();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that the assets in a course can be sorted
     */
    it('can be sorted', function(callback) {
      // Generate some users
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
          TestsUtil.getAssetLibraryClient(null, course, null, function(client3, course, user3) {
            TestsUtil.getAssetLibraryClient(null, course, null, function(client4, course, user4) {

              // User 1 creates many test assets
              TestsUtil.generateTestAssets(client1, course, 12, function(assets) {
                // Start with default 'most recent' ordering
                assets = _.sortBy(assets, 'id').reverse();

                // Generate some likes and views (each assertLike adds two views as a side effect)
                AssetsTestUtil.assertLike(client2, course, assets[6].id, true, function() {
                  AssetsTestUtil.assertLike(client2, course, assets[7].id, true, function() {
                    AssetsTestUtil.assertLike(client2, course, assets[8].id, true, function() {
                      AssetsTestUtil.assertLike(client3, course, assets[7].id, true, function() {
                        AssetsTestUtil.assertLike(client3, course, assets[8].id, true, function() {
                          AssetsTestUtil.assertLike(client3, course, assets[9].id, true, function() {

                            // Generate some additional views
                            AssetsTestUtil.assertGetAsset(client2, course, assets[0].id, null, 0, function(asset) {
                              AssetsTestUtil.assertGetAsset(client2, course, assets[1].id, null, 0, function(asset) {
                                AssetsTestUtil.assertGetAsset(client2, course, assets[2].id, null, 0, function(asset) {
                                  AssetsTestUtil.assertGetAsset(client3, course, assets[1].id, null, 0, function(asset) {
                                    AssetsTestUtil.assertGetAsset(client3, course, assets[2].id, null, 0, function(asset) {
                                      AssetsTestUtil.assertGetAsset(client4, course, assets[2].id, null, 0, function(asset) {

                                        // Generate some comments
                                        AssetsTestUtil.assertCreateComment(client2, course, assets[8].id, 'Comment', null, function(comment) {
                                          AssetsTestUtil.assertCreateComment(client2, course, assets[9].id, 'Comment', null, function(comment) {
                                            AssetsTestUtil.assertCreateComment(client2, course, assets[10].id, 'Comment', null, function(comment) {
                                              AssetsTestUtil.assertCreateComment(client3, course, assets[9].id, 'Comment', null, function(comment) {
                                                AssetsTestUtil.assertCreateComment(client3, course, assets[10].id, 'Comment', null, function(comment) {
                                                  AssetsTestUtil.assertCreateComment(client3, course, assets[11].id, 'Comment', null, function(comment) {

                                                    // Get all assets unpaged for purposes of comparison
                                                    AssetsTestUtil.assertGetAssets(client1, course, null, 'recent', 12, null, 12, function(assets) {
                                                      assets = assets.results;

                                                      // Verify that sorting by 'recent' returns two pages of assets in reverse creation order
                                                      AssetsTestUtil.assertGetAssets(client1, course, null, 'recent', null, null, 12, function(pagedAssets) {
                                                        AssetsTestUtil.assertAssets(pagedAssets, _.at(assets, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 12);

                                                        AssetsTestUtil.assertGetAssets(client1, course, null, 'recent', null, 10, 12, function(pagedAssets) {
                                                          AssetsTestUtil.assertAssets(pagedAssets, _.at(assets, [10, 11]), 12);

                                                          // Verify that sorting by 'likes' returns two pages of assets ordered by 1) like count, 2) creation time
                                                          AssetsTestUtil.assertGetAssets(client1, course, null, 'likes', null, null, 12, function(pagedAssets) {
                                                            AssetsTestUtil.assertAssets(pagedAssets, _.at(assets, [7, 8, 6, 9, 0, 1, 2, 3, 4, 5]), 12);

                                                            AssetsTestUtil.assertGetAssets(client1, course, null, 'likes', null, 10, 12, function(pagedAssets) {
                                                              AssetsTestUtil.assertAssets(pagedAssets, _.at(assets, [10, 11]), 12);

                                                              // Verify that sorting by 'views' returns two pages of assets ordered by 1) view count, 2) creation time
                                                              AssetsTestUtil.assertGetAssets(client1, course, null, 'views', null, null, 12, function(pagedAssets) {
                                                                AssetsTestUtil.assertAssets(pagedAssets, _.at(assets, [7, 8, 2, 1, 6, 9, 0, 3, 4, 5]), 12);

                                                                AssetsTestUtil.assertGetAssets(client1, course, null, 'views', null, 10, 12, function(pagedAssets) {
                                                                  AssetsTestUtil.assertAssets(pagedAssets, _.at(assets, [10, 11]), 12);

                                                                  // Verify that sorting by 'comments' returns two pages of assets ordered by 1) comment count, 2) creation time
                                                                  AssetsTestUtil.assertGetAssets(client1, course, null, 'comments', null, null, 12, function(pagedAssets) {
                                                                    AssetsTestUtil.assertAssets(pagedAssets, _.at(assets, [9, 10, 8, 11, 0, 1, 2, 3, 4, 5]), 12);

                                                                    AssetsTestUtil.assertGetAssets(client1, course, null, 'comments', null, 10, 12, function(pagedAssets) {
                                                                      AssetsTestUtil.assertAssets(pagedAssets, _.at(assets, [6, 7]), 12);

                                                                      // Verify that sorting by 'impact' returns two pages of assets ordered by:
                                                                      // - 1) weighted total of comments (6 pts), likes (3 pts), views (2 pts);
                                                                      // - 2) creation time
                                                                      AssetsTestUtil.assertGetAssets(client1, course, null, 'impact', null, null, 12, function(pagedAssets) {
                                                                        AssetsTestUtil.assertAssets(pagedAssets, _.at(assets, [8, 9, 7, 10, 6, 2, 11, 1, 0, 3]), 12);

                                                                        AssetsTestUtil.assertGetAssets(client1, course, null, 'impact', null, 10, 12, function(pagedAssets) {
                                                                          AssetsTestUtil.assertAssets(pagedAssets, _.at(assets, [4, 5]), 12);

                                                                          return callback();
                                                                        });
                                                                      });
                                                                    });
                                                                  });
                                                                });
                                                              });
                                                            });
                                                          });
                                                        });
                                                      });
                                                    });
                                                  });
                                                });
                                              });
                                            });
                                          });
                                        });
                                      });
                                    });
                                  });
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies validation when getting the assets
     */
    it('is validated', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {

        // Invalid asset type
        AssetsTestUtil.assertGetAssetsFails(client, course, {'types': 'invalid'}, null, null, null, 400, function() {
          AssetsTestUtil.assertGetAssetsFails(client, course, {'types': 42}, null, null, null, 400, function() {
            AssetsTestUtil.assertGetAssetsFails(client, course, {'types': ['invalid']}, null, null, null, 400, function() {
              AssetsTestUtil.assertGetAssetsFails(client, course, {'types': [42]}, null, null, null, 400, function() {
                AssetsTestUtil.assertGetAssetsFails(client, course, null, 'bogus', null, null, 400, function() {

                  return callback();
                });
              });
            });
          });
        });
      });
    });

    /**
     * Set up a few categories in a course
     *
     * @param  {CanvasCourse}   course                  The course in which the categories should be created
     * @param  {Function}       callback                Standard callback function
     * @param  {Category}       callback.category1      The first category
     * @param  {Category}       callback.category2      The second category
     * @throws {AssertionError}                         Error thrown when an assertion failed
     * @api private
     */
    var setupCategories = function(course, callback) {
      var instructor = TestsUtil.generateInstructor();
      TestsUtil.getAssetLibraryClient(null, course, instructor, function(client, course, instructor) {
        CategoriesTestUtil.assertCreateCategory(client, course, 'Category 1', function(category1) {
          CategoriesTestUtil.assertCreateCategory(client, course, 'Category 2', function(category2) {
            return callback(category1, category2);
          });
        });
      });
    };

    /**
     * Enroll user in section(s)
     *
     * @param  {CanvasCourse}   course                  The course in which sections belong
     * @param  {User}           canvasUser              The user in Canvas
     * @param  {String[]}       sections                Sections of course
     * @param  {Function}       callback                Standard callback function
     * @param  {Category}       callback.user           Updated user
     * @api private
     */
    var setUpSectionStudent = function(course, canvasUser, sections, callback) {
      TestsUtil.getAssetLibraryClient(null, course, canvasUser, function(client, course, canvasUser) {
        var canvasCourseId = course.id;

        getCourse(canvasCourseId, function(course) {
          findUser(canvasUser, course, sections, function(user) {
            callback(user);
          });
        });
      });
    };

    /**
     * Create a few assets in a course
     *
     * @param  {CanvasCourse}   course                      The course in which the categories should be created
     * @param  {User}           user                        The user in Canvas. Defaults to a new user in the `ucberkeley` Canvas instance
     * @param  {Category}       category1                   The first category
     * @param  {Category}       category2                   The second category
     * @param  {Function}       callback                    Standard callback function
     * @param  {Asset}          callback.berkeleyAsset      A link asset in the first category
     * @param  {Asset}          callback.davisAsset         A link asset in the second category
     * @param  {Asset}          callback.uclaAsset          A link asset in the first and second category
     * @param  {Asset}          callback.logoAsset          A file asset
     * @throws {AssertionError}                             Error thrown when an assertion failed
     * @api private
     */
    var setupAssets = function(course, user, category1, category2, callback) {
      TestsUtil.getAssetLibraryClient(null, course, user, function(client, course, user) {
        // Create a few assets with lots of metadata
        var opts = {
          'categories': [category1.id],
          'description': 'University of California, Berkeley homepage, #ucberk',
          'source': 'http://www.universityofcalifornia.edu/uc-system',
          'comment': 'Life is what happens to you while you are busy making an Impact'
        };
        AssetsTestUtil.assertCreateLink(client, course, 'UC Berkeley', 'http://www.berkeley.edu/', opts, function(berkeleyAsset) {
          CategoriesTestUtil.assertCategory(berkeleyAsset.categories[0], {'expectedCategory': category1});

          opts = {
            'categories': [category2.id],
            'description': 'University of California, Davis homepage, #ucdav',
            'source': 'http://www.universityofcalifornia.edu/uc-system'
          };
          AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', opts, function(davisAsset) {
            CategoriesTestUtil.assertCategory(davisAsset.categories[0], {'expectedCategory': category2});

            opts = {
              'categories': [category1.id, category2.id],
              'description': 'University of California, Los Angeles homepage, #ucla',
              'source': 'http://www.universityofcalifornia.edu/uc-system',
              'comment': 'It\'s better to burn out than to have no Impact'
            };
            AssetsTestUtil.assertCreateLink(client, course, 'UC Los Angeles', 'http://www.ucla.edu/', opts, function(uclaAsset) {
              CategoriesTestUtil.assertCategory(uclaAsset.categories[0], {'expectedCategory': category1});
              CategoriesTestUtil.assertCategory(uclaAsset.categories[1], {'expectedCategory': category2});

              var opts = {
                'description': 'University of California, Berkeley logo, #ucberk',
                'source': 'http://www.universityofcalifornia.edu/uc-system'
              };
              AssetsTestUtil.assertCreateFile(client, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), opts, function(logoAsset) {

                return callback(client, user, berkeleyAsset, davisAsset, uclaAsset, logoAsset);
              });
            });
          });
        });
      });
    };

    /**
     * Test that verifies that assets can be searched through
     */
    it('can be searched through', function(callback) {
      var canvasCourse = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
      var canvasUser1 = TestsUtil.generateUser(global.tests.canvas.ucberkeley);
      var canvasUser2 = TestsUtil.generateUser(global.tests.canvas.ucberkeley);

      setupCategories(canvasCourse, function(category1, category2) {
        setUpSectionStudent(canvasCourse, canvasUser1, ['Section 001'], function(user1) {
          assert.ok(user1.canvas_course_sections);

          setupAssets(canvasCourse, canvasUser1, category1, category2, function(client, canvasUser1, berkeleyAsset1, davisAsset1, uclaAsset1, logoAsset1) {
            setUpSectionStudent(canvasCourse, canvasUser2, ['Section 002'], function(user2) {
              assert.ok(user2.canvas_course_sections);

              setupAssets(canvasCourse, canvasUser2, category1, category2, function(client, canvasUser2, berkeleyAsset2, davisAsset2, uclaAsset2, logoAsset2) {

                // All assets should be returned when no filters are specified
                var allAssets = [berkeleyAsset1, davisAsset1, uclaAsset1, logoAsset1, berkeleyAsset2, davisAsset2, uclaAsset2, logoAsset2];
                verifySearch(client, canvasCourse, null, allAssets, function() {

                  // Simple searches
                  verifySearch(client, canvasCourse, {'keywords': 'Los'}, [uclaAsset1, uclaAsset2], function() {
                    verifySearch(client, canvasCourse, {'keywords': 'Los Angeles'}, [uclaAsset1, uclaAsset2], function() {
                      verifySearch(client, canvasCourse, {'keywords': 'This totally does not match anything'}, [], function() {
                        verifySearch(client, canvasCourse, {'keywords': 'university Angeles'}, [uclaAsset1, uclaAsset2], function() {
                          verifySearch(client, canvasCourse, {'keywords': 'Uni ang'}, [uclaAsset1, uclaAsset2], function() {
                            verifySearch(client, canvasCourse, {'keywords': 'erkel'}, [berkeleyAsset1, berkeleyAsset2, logoAsset1, logoAsset2], function() {
                              verifySearch(client, canvasCourse, {'category': category1.id}, [berkeleyAsset1, berkeleyAsset2, uclaAsset1, uclaAsset2], function() {
                                verifySearch(client, canvasCourse, {'types': ['file']}, [logoAsset1, logoAsset2], function() {
                                  verifySearch(client, canvasCourse, {'types': ['file', 'link']}, [logoAsset1, logoAsset2, berkeleyAsset1, berkeleyAsset2, davisAsset1, davisAsset2, uclaAsset1, uclaAsset2], function() {
                                    verifySearch(client, canvasCourse, {'user': user1.id}, [berkeleyAsset1, davisAsset1, uclaAsset1, logoAsset1], function() {
                                      verifySearch(client, canvasCourse, {'section': user1.canvas_course_sections[0]}, [berkeleyAsset1, davisAsset1, uclaAsset1, logoAsset1], function() {

                                        // Permutations of 2 options
                                        verifySearch(client, canvasCourse, {'keywords': 'Los Angeles', 'category': category1.id}, [uclaAsset1, uclaAsset2], function() {
                                          verifySearch(client, canvasCourse, {'keywords': 'Los Angeles', 'types': ['file']}, [], function() {
                                            verifySearch(client, canvasCourse, {'keywords': 'Los Angeles', 'user': user2.id}, [uclaAsset2], function() {
                                              verifySearch(client, canvasCourse, {'category': category1.id, 'types': ['file']}, [], function() {
                                                verifySearch(client, canvasCourse, {'category': category1.id, 'user': user1.id}, [berkeleyAsset1, uclaAsset1], function() {
                                                  verifySearch(client, canvasCourse, {'types': ['file'], 'user': user1.id}, [logoAsset1], function() {
                                                    verifySearch(client, canvasCourse, {'types': ['file', 'link'], 'user': user1.id}, [logoAsset1, berkeleyAsset1, davisAsset1, uclaAsset1], function() {
                                                      verifySearch(client, canvasCourse, {'section': user1.canvas_course_sections[0], 'types': ['file']}, [logoAsset1], function() {

                                                        // Permutations of 3 options
                                                        verifySearch(client, canvasCourse, {'keywords': 'Los Angeles', 'category': category1.id, 'types': ['file']}, [], function() {
                                                          verifySearch(client, canvasCourse, {'keywords': 'Los Angeles', 'category': category1.id, 'user': user1.id}, [uclaAsset1], function() {
                                                            verifySearch(client, canvasCourse, {'keywords': 'Los Angeles', 'types': ['file'], 'user': user2.id}, [], function() {
                                                              verifySearch(client, canvasCourse, {'category': category1.id, 'types': ['link'], 'user': user2.id}, [berkeleyAsset2, uclaAsset2], function() {
                                                                verifySearch(client, canvasCourse, {'category': category1.id, 'types': ['link', 'file'], 'user': user2.id}, [berkeleyAsset2, uclaAsset2], function() {
                                                                  verifySearch(client, canvasCourse, {'category': category1.id, 'section': user2.canvas_course_sections[0], 'types': ['link']}, [berkeleyAsset2, uclaAsset2], function() {

                                                                    // Permutations of 4 options
                                                                    verifySearch(client, canvasCourse, {'category': category1.id, 'section': user1.canvas_course_sections[0], 'user': user2.id, 'types': ['link']}, [], function() {

                                                                      // Create a like and comment, and get updated asset data
                                                                      AssetsTestUtil.assertLike(client, canvasCourse, uclaAsset1.id, true, function() {
                                                                        AssetsTestUtil.assertCreateComment(client, canvasCourse, berkeleyAsset1.id, 'Comment', null, function() {
                                                                          AssetsTestUtil.assertGetAsset(client, canvasCourse, uclaAsset1.id, null, null, function(uclaAsset1) {
                                                                            AssetsTestUtil.assertGetAsset(client, canvasCourse, berkeleyAsset1.id, null, null, function(berkeleyAsset1) {
                                                                              // Verify that sorting works in conjunction with search filters
                                                                              verifySort(client, canvasCourse, {'category': category1.id, 'user': user1.id}, 'likes', [uclaAsset1, berkeleyAsset1], function() {
                                                                                verifySort(client, canvasCourse, {'category': category1.id, 'user': user1.id}, 'comments', [berkeleyAsset1, uclaAsset1], function() {

                                                                                  return callback();
                                                                                });
                                                                              });
                                                                            });
                                                                          });
                                                                        });
                                                                      });
                                                                    });
                                                                  });
                                                                });
                                                              });
                                                            });
                                                          });
                                                        });
                                                      });
                                                    });
                                                  });
                                                });
                                              });
                                            });
                                          });
                                        });
                                      });
                                    });
                                  });
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that the search query searches through ALL assets and not the first ten
     * as this is a common Sequelize mistake
     */
    it('can search through many assets', function(callback) {
      // Create a couple of assets that we will eventually search for
      var course = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
      var canvasUser = TestsUtil.generateUser(global.tests.canvas.ucberkeley);

      setupCategories(course, function(category1, category2) {
        setUpSectionStudent(course, canvasUser, ['Section 001'], function(user1) {
          setupAssets(course, canvasUser, category1, category2, function(client, canvasUser, berkeleyAsset1, davisAsset1, uclaAsset1, logoAsset1) {

            // Now create a bunch of irrelevant assets
            setupCategories(course, function(category3, category4) {
              setupAssets(course, null, category3, category4, function(client, user2, berkeleyAsset3, davisAsset3, uclaAsset3, logoAsset3) {
                setupAssets(course, null, category3, category4, function(client, user3, berkeleyAsset4, davisAsset4, uclaAsset4, logoAsset4) {
                  setupAssets(course, null, category3, category4, function(client, user4, berkeleyAsset5, davisAsset5, uclaAsset5, logoAsset5) {

                    // Search for the first assets
                    verifySearch(client, course, {'keywords': 'Los Angeles', 'category': category1.id}, [uclaAsset1], function() {
                      verifySearch(client, course, {'user': user1.id}, [berkeleyAsset1, davisAsset1, uclaAsset1, logoAsset1], function() {
                        verifySearch(client, course, {'user': user1.id, 'types': 'link'}, [berkeleyAsset1, davisAsset1, uclaAsset1], function() {

                          // Test inclusion with respect to comment_count
                          verifySearch(client, course, {'user': user1.id, 'hasComments': true}, [berkeleyAsset1, uclaAsset1], function() {
                            verifySearch(client, course, {'user': user1.id, 'hasComments': false}, [davisAsset1, logoAsset1], function() {
                              return callback();
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that hashtags can be searched for
     */
    it('can search for hashtags', function(callback) {
      // Create a couple of assets that we will search for
      var course = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
      TestsUtil.getAssetLibraryClient(null, course, null, function(client, course, user) {
        setupCategories(course, function(category1, category2) {
          setupAssets(course, user, category1, category2, function(client, user, berkeleyAsset, davisAsset, uclaAsset, logoAsset) {

            // Verify that including the pound sign doesn't influence the hashtag search results
            verifySearch(client, course, {'keywords': 'ucla'}, [uclaAsset], function() {
              verifySearch(client, course, {'keywords': '#ucla'}, [uclaAsset], function() {
                return callback();
              });
            });
          });
        });
      });
    });
  });

  describe('Hidden assets', function() {

    /**
     * Test that verifies that hidden links can be created
     */
    it('can create hidden links', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {

        // Create a link without specifying its visibility
        AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(visibleAsset1) {
          // Create a hidden link
          AssetsTestUtil.assertCreateLink(client, course, 'UC Berkeley', 'http://www.berkeley.edu/', {'visible': false}, function(hiddenAsset) {
            // Create a link with visibility explicitly set to true
            AssetsTestUtil.assertCreateLink(client, course, 'UC Irvine', 'http://www.uci.edu/', {'visible': true}, function(visibleAsset2) {

              // Verify that only the visible assets are returned when listing the assets
              AssetsTestUtil.assertGetAssets(client, course, null, null, null, null, 2, function(assets) {
                AssetsTestUtil.assertAsset(assets.results[0], {'expectedAsset': visibleAsset2});
                AssetsTestUtil.assertAsset(assets.results[1], {'expectedAsset': visibleAsset1});

                return callback();
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that hidden files can be created
     */
    it('can create hidden files', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {

        // Create a file without specifying its visibility
        AssetsTestUtil.assertCreateFile(client, course, 'UC Davis', getFileStream('logo-ucberkeley.png'), null, function(visibleAsset1) {
          // Create a hidden file
          AssetsTestUtil.assertCreateFile(client, course, 'UC Berkeley', getFileStream('logo-ucberkeley.png'), {'visible': false}, function(hiddenAsset) {
            // Create a file with visibility explicitly set to true
            AssetsTestUtil.assertCreateFile(client, course, 'UC Irvine', getFileStream('logo-ucberkeley.png'), {'visible': true}, function(visibleAsset2) {

              // Verify that only the visible assets are returned when listing the assets
              AssetsTestUtil.assertGetAssets(client, course, null, null, null, null, 2, function(assets) {
                AssetsTestUtil.assertAsset(assets.results[0], {'expectedAsset': visibleAsset2});
                AssetsTestUtil.assertAsset(assets.results[1], {'expectedAsset': visibleAsset1});

                return callback();
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that hidden files are not included when searching
     */
    it('can not search hidden assets', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {

        // Create a visible UC Berkeley file asset
        AssetsTestUtil.assertCreateFile(client, course, 'UC Berkeley File Visible', getFileStream('logo-ucberkeley.png'), null, function(visibleBerkeleyFile) {
          // Create a visible UC Berkeley link asset
          AssetsTestUtil.assertCreateLink(client, course, 'UC Berkeley Link Visible', 'http://www.berkeley.edu/', null, function(visibleBerkeleyLink) {
            // Create a visible UC Davis asset
            AssetsTestUtil.assertCreateLink(client, course, 'UC Davis Link Visible', 'http://www.davis.edu/', null, function(visibleDavisLink) {
              // Create a hidden UC Berkeley file asset
              AssetsTestUtil.assertCreateFile(client, course, 'UC Berkeley File Hidden', getFileStream('logo-ucberkeley.png'), {'visible': false}, function(hiddenBerkeleyFile) {
                // Create a hidden UC Berkeley link asset
                AssetsTestUtil.assertCreateLink(client, course, 'UC Berkeley Link Hidden', 'http://www.berkeley.edu/', {'visible': false}, function(hiddenBerkeleyLink) {

                  // Verify that searching through the assets doesn't return hidden assets
                  verifySearch(client, course, {'keywords': 'berkeley'}, [visibleBerkeleyLink, visibleBerkeleyFile], function() {
                    return callback();
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Edit asset', function() {

    /**
     * Test that verifies that an asset can be edited
     */
    it('can be edited', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Verify that the title and the description can be updated
          AssetsTestUtil.assertEditAsset(client, course, asset.id, 'UC Berkeley', {'description': 'University of California, Berkeley'}, function(asset) {

            // Verify that the title can be updated and the description can be cleared
            AssetsTestUtil.assertEditAsset(client, course, asset.id, 'UC Berkeley', null, function(asset) {

              return callback();
            });
          });
        });
      });
    });

    /**
     * Test that verifies validation when editing an asset
     */
    it('is validated', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Invalid asset id
          AssetsTestUtil.assertEditAssetFails(client, course, 'Not a number', 'UC Irvine', null, 400, function() {
            AssetsTestUtil.assertEditAssetFails(client, course, -1, 'UC Irvine', null, 404, function() {
              AssetsTestUtil.assertEditAssetFails(client, course, 234234233, 'UC Irvine', null, 404, function() {

                // Missing title
                AssetsTestUtil.assertEditAssetFails(client, course, asset.id, null, null, 400, function() {
                  AssetsTestUtil.assertEditAssetFails(client, course, asset.id, '', null, 400, function() {
                    // Too long title
                    AssetsTestUtil.assertEditAssetFails(client, course, asset.id, randomstring.generate(256), null, 400, function() {

                      return callback();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies authorization when editing an asset
     */
    it('verifies authorization', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course1, user1) {
        AssetsTestUtil.assertCreateLink(client1, course1, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Verify that the asset can be edited by the user that added the asset
          AssetsTestUtil.assertEditAsset(client1, course1, asset.id, 'UC Berkeley', null, function(asset) {

            // Verify that the asset can be edited by an instructor of the course
            var instructor1 = TestsUtil.generateInstructor();
            TestsUtil.getAssetLibraryClient(null, course1, instructor1, function(client2, course1, instructor1) {
              AssetsTestUtil.assertEditAsset(client1, course1, asset.id, 'UCLA', null, function(asset) {

                // Verify that an asset can not be edited by a regular student
                TestsUtil.getAssetLibraryClient(null, course1, null, function(client3, course1, user2) {
                  AssetsTestUtil.assertEditAssetFails(client3, course1, asset.id, 'UC Irvine', null, 401, function() {

                    // Verify that an instructor in a different course can not edit the asset
                    var instructor2 = TestsUtil.generateInstructor();
                    TestsUtil.getAssetLibraryClient(null, null, instructor2, function(client4, course2, instructor2) {
                      AssetsTestUtil.assertEditAssetFails(client4, course2, asset.id, 'UC Irvine', null, 404, function() {

                        // Verify that the asset has not been updated
                        AssetsTestUtil.assertGetAsset(client1, course1, asset.id, asset, 0, function(asset) {

                          return callback();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Delete asset', function() {

    /**
     * Test that verifies that an asset can be deleted by an administrator
     */
    it('can be deleted by instructor', function(callback) {
      var instructor = TestsUtil.generateInstructor();
      TestsUtil.getAssetLibraryClient(null, null, instructor, function(client1, course, instructor) {
        AssetsTestUtil.assertCreateLink(client1, course, 'UC Berkeley', 'http://www.ucberkeley.edu/', null, function(asset1) {

          // Verify that the asset can be deleted
          AssetsTestUtil.assertDeleteAsset(client1, course, asset1.id, function() {

            // Verify that an asset with likes and comments can be deleted
            AssetsTestUtil.assertCreateLink(client1, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset2) {
              // Like the asset
              TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
                AssetsTestUtil.assertLike(client2, course, asset2.id, true, function() {
                  // Add a comment to the asset
                  TestsUtil.getAssetLibraryClient(null, course, null, function(client3, course, user3) {
                    AssetsTestUtil.assertCreateComment(client3, course, asset2.id, 'Comment 1', null, function(comment) {
                      // Verify that the asset can be deleted
                      AssetsTestUtil.assertDeleteAsset(client1, course, asset2.id, function() {

                        // Sanity check there are no assets in the asset library
                        AssetsTestUtil.assertGetAssets(client1, course, null, null, null, null, 0, function(assets) {
                          assert.strictEqual(assets.total, 0);
                          assert.strictEqual(assets.results.length, 0);
                          return callback();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that an asset with no interactions can be deleted by an associated user
     */
    it('can be deleted by user', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        AssetsTestUtil.assertCreateLink(client1, course, 'UC Berkeley', 'http://www.ucberkeley.edu/', null, function(asset1) {

          // Verify that a different user cannot delete the asset
          TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
            AssetsTestUtil.assertDeleteAssetFails(client2, course, asset1.id, 401, function() {
              //Verify that the creator can delete the asset
              AssetsTestUtil.assertDeleteAsset(client1, course, asset1.id, function() {

                // Create an asset with comments
                AssetsTestUtil.assertCreateLink(client1, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset2) {
                  AssetsTestUtil.assertCreateComment(client2, course, asset2.id, 'Comment 1', null, function(comment) {
                    // Verify that the creator cannot delete the commented asset
                    AssetsTestUtil.assertDeleteAssetFails(client1, course, asset2.id, 401, function() {

                      // Create an asset with likes
                      AssetsTestUtil.assertCreateLink(client1, course, 'UC Riverside', 'http://www.ucr.edu/', null, function(asset3) {
                        AssetsTestUtil.assertLike(client2, course, asset3.id, true, function() {
                          // Verify that the creator cannot delete the liked asset
                          AssetsTestUtil.assertDeleteAssetFails(client1, course, asset3.id, 401, function() {

                            // Create an asset for use in a whiteboard
                            AssetsTestUtil.assertCreateLink(client1, course, 'UC Riverside', 'http://www.ucr.edu/', null, function(asset4) {
                              AssetsTestUtil.mockPreviewData(asset4, function() {
                                UsersTestUtil.assertGetMe(client1, course, null, function(user1Me) {
                                  WhiteboardsTestUtil.assertCreateWhiteboard(client1, course, 'UC Riverside Whiteboard', [user1Me.id], function(whiteboard) {
                                    WhiteboardsTestUtil.addAssetToWhiteboard(client1, course, asset4, whiteboard, function() {
                                      // Verify that the creator cannot delete the used asset
                                      AssetsTestUtil.assertDeleteAssetFails(client1, course, asset4.id, 401, function() {

                                        // Export the whiteboard and remove asset from active whiteboard
                                        WhiteboardsTestUtil.assertExportWhiteboardToAsset(client1, course, whiteboard.id, null, null, function(exportedAsset) {
                                          WhiteboardsTestUtil.removeAssetFromWhiteboard(client1, course, asset4, whiteboard, function() {
                                            // Verify that the creator cannot delete the asset
                                            AssetsTestUtil.assertDeleteAssetFails(client1, course, asset4.id, 401, function() {

                                              // Delete the exported whiteboard
                                              AssetsTestUtil.assertDeleteAsset(client1, course, exportedAsset.id, function() {
                                                // Verify that the creator can delete the asset
                                                AssetsTestUtil.assertDeleteAsset(client1, course, asset4.id, function() {

                                                  return callback();
                                                });
                                              });
                                            });
                                          });
                                        });
                                      });
                                    });
                                  });
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies validation when deleting a category
     */
    it('is validated', function(callback) {
      var instructor = TestsUtil.generateInstructor();
      TestsUtil.getAssetLibraryClient(null, null, instructor, function(client, course, instructor) {
        AssetsTestUtil.assertCreateLink(client, course, 'UC Berkeley', 'http://www.ucberkeley.edu/', null, function(asset) {

          // Invalid asset id
          AssetsTestUtil.assertDeleteAssetFails(client, course, 'Not a number', 400, function() {
            AssetsTestUtil.assertDeleteAssetFails(client, course, -1, 404, function() {
              AssetsTestUtil.assertDeleteAssetFails(client, course, 234234233, 404, function() {

                return callback();
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies authorization when deleting a category
     */
    it('verifies authorization', function(callback) {
      var instructor1 = TestsUtil.generateInstructor();
      TestsUtil.getAssetLibraryClient(null, null, instructor1, function(client1, course1, instructor1) {
        AssetsTestUtil.assertCreateLink(client1, course1, 'UC Berkeley', 'http://www.ucberkeley.edu/', null, function(asset1) {

          // Verify that an asset can not be deleted by a non-administrator
          TestsUtil.getAssetLibraryClient(null, course1, null, function(client2, course, user2) {
            AssetsTestUtil.assertDeleteAssetFails(client2, course1, asset1.id, 401, function() {

              // Verify that the asset has not been deleted
              AssetsTestUtil.assertGetAsset(client2, course1, asset1.id, asset1, 0, function() {

                // Verify that an asset in a different course can not be deleted
                var instructor2 = TestsUtil.generateInstructor();
                TestsUtil.getAssetLibraryClient(null, null, instructor2, function(client3, course2, instructor2) {
                  AssetsTestUtil.assertCreateLink(client3, course2, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset2) {
                    AssetsTestUtil.assertDeleteAssetFails(client1, course2, asset2.id, 401, function() {

                      // Verify that the asset has not been deleted
                      AssetsTestUtil.assertGetAsset(client3, course2, asset2.id, asset2, 0, function() {

                        return callback();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Migrate assets', function() {

    /**
     * Test that verifies asset and category migration
     */
    it('migrates file and link assets with categories', function(callback) {
      var course1 = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
      var course2 = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);

      var instructor = TestsUtil.generateInstructor(global.tests.canvas.ucberkeley);

      // Instructor is teaching course 1
      TestsUtil.getAssetLibraryClient(null, course1, instructor, function(client1, course1, instructor1) {
        // Instructor is teaching course 2
        TestsUtil.getAssetLibraryClient(null, course2, instructor, function(client2, course2, instructor2) {

          // Instructor creates categories in course 1
          CategoriesTestUtil.assertCreateCategory(client1, course1, 'Category 1', function(category1) {
            CategoriesTestUtil.assertCreateCategory(client1, course1, 'Category 2', function(category2) {

              // Instructor creates assets in course 1
              var opts = {'categories': category1.id};
              AssetsTestUtil.assertCreateLink(client1, course1, 'UC Berkeley', 'http://www.ucberkeley.edu/', opts, function(asset1) {
                opts = {'categories': [category1.id, category2.id]};
                AssetsTestUtil.assertCreateLink(client1, course1, 'UC Davis', 'http://www.ucdavis.edu/', opts, function(asset2) {

                  // Migrate assets from instructor's course 1 id to instructor's course 2 id
                  UsersTestUtil.assertGetMe(client2, course2, null, function(me2) {
                    AssetsTestUtil.assertMigrationCompletes(client1, course1, me2.id, 0, 2, function() {

                      // Get instructor's assets in course 2
                      AssetsTestUtil.assertGetAssets(client2, course2, null, null, null, null, 2, function(assets) {

                        // Verify that assets were migrated and categories preserved
                        var migratedAsset1 = _.find(assets.results, {'title': 'UC Berkeley'});
                        AssetsTestUtil.assertGetMigratedAsset(client2, course2, migratedAsset1.id, ['Category 1'], function() {
                          var migratedAsset2 = _.find(assets.results, {'title': 'UC Davis'});
                          AssetsTestUtil.assertGetMigratedAsset(client2, course2, migratedAsset2.id, ['Category 1', 'Category 2'], function() {

                            return callback();
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies migration can be started from the REST API
     */
    it('starts migration from REST API', function(callback) {
      var course1 = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
      var course2 = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);

      var instructor = TestsUtil.generateInstructor(global.tests.canvas.ucberkeley);

      // Instructor is teaching course 1
      TestsUtil.getAssetLibraryClient(null, course1, instructor, function(client1, course1, instructor1) {
        // Instructor is teaching course 2
        TestsUtil.getAssetLibraryClient(null, course2, instructor, function(client2, course2, instructor2) {

          // Instructor creates categories in course 1
          CategoriesTestUtil.assertCreateCategory(client1, course1, 'Category 1', function(category1) {
            CategoriesTestUtil.assertCreateCategory(client1, course1, 'Category 2', function(category2) {

              // Instructor creates assets in course 1
              var opts = {'categories': category1.id};
              AssetsTestUtil.assertCreateLink(client1, course1, 'UC Berkeley', 'http://www.ucberkeley.edu/', opts, function(asset1) {
                opts = {'categories': [category1.id, category2.id]};
                AssetsTestUtil.assertCreateLink(client1, course1, 'UC Davis', 'http://www.ucdavis.edu/', opts, function(asset2) {

                  // Verify that migration from instructor's course 1 id to instructor's course 2 id is started
                  UsersTestUtil.assertGetMe(client2, course2, null, function(me2) {
                    AssetsTestUtil.assertMigrationStarts(client1, course1, me2.id, function() {

                      return callback();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies admin authorization in source course
     */
    it('verifies admin authorization in source course', function(callback) {
      var course1 = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
      var course2 = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);

      var user = TestsUtil.generateUser(global.tests.canvas.ucberkeley);
      var userAsInstructor = TestsUtil.generateInstructor(global.tests.canvas.ucberkeley);
      user.id = userAsInstructor.id;

      // User is a regular user in course 1
      TestsUtil.getAssetLibraryClient(null, course1, user, function(client1, course1, user) {
        // User is an instructor in course 2
        TestsUtil.getAssetLibraryClient(null, course2, userAsInstructor, function(client2, course2, userAsInstructor) {

          // Verify that migration from course 1 to course 2 fails
          UsersTestUtil.assertGetMe(client2, course2, null, function(me2) {
            AssetsTestUtil.assertMigrationFails(client1, course1, me2.id, 401, function() {
              return callback();
            });
          });
        });
      });
    });

    /**
     * Test that verifies admin authorization in destination course
     */
    it('verifies admin authorization in destination course', function(callback) {
      var course1 = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
      var course2 = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);

      var user = TestsUtil.generateUser(global.tests.canvas.ucberkeley);
      var userAsInstructor = TestsUtil.generateInstructor(global.tests.canvas.ucberkeley);
      user.id = userAsInstructor.id;

      // User is an instructor in course 1
      TestsUtil.getAssetLibraryClient(null, course1, userAsInstructor, function(client1, course1, userAsInstructor) {
        // User is a regular user in course 2
        TestsUtil.getAssetLibraryClient(null, course2, user, function(client2, course2, user) {

          // Verify that migration from course 1 to course 2 fails
          UsersTestUtil.assertGetMe(client2, course2, null, function(me2) {
            AssetsTestUtil.assertMigrationFails(client1, course1, me2.id, 401, function() {
              return callback();
            });
          });
        });
      });
    });

    /**
     * Test that verifies Canvas user account must match between source and destination course
     */
    it('insists on matching Canvas user accounts', function(callback) {
      var course1 = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
      var course2 = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);

      var instructor1 = TestsUtil.generateInstructor(global.tests.canvas.ucberkeley);
      var instructor2 = TestsUtil.generateInstructor(global.tests.canvas.ucberkeley);

      // Instructor 1 teaches course 1
      TestsUtil.getAssetLibraryClient(null, course1, instructor1, function(client1, course1, instructor1) {
        // Instructor 2 teaches course 2
        TestsUtil.getAssetLibraryClient(null, course2, instructor2, function(client2, course2, instructor2) {

          // Verify that migration from course 1 to course 2 fails
          UsersTestUtil.assertGetMe(client2, course2, null, function(me2) {
            AssetsTestUtil.assertMigrationFails(client1, course1, me2.id, 400, function() {
              return callback();
            });
          });
        });
      });
    });

    /**
     * Test that verifies Canvas instance must match between source and destination course
     */
    it('insists on matching Canvas instances', function(callback) {
      var berkeleyCourse = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
      var davisCourse = TestsUtil.generateCourse(global.tests.canvas.ucdavis);

      var berkeleyInstructor = TestsUtil.generateInstructor(global.tests.canvas.ucberkeley);
      var davisInstructor = TestsUtil.generateInstructor(global.tests.canvas.ucdavis);

      // Berkeley and Davis instructors happen to have the same Canvas account id
      berkeleyInstructor.id = davisInstructor.id;

      // Berkeley instructor teaches Berkeley course
      TestsUtil.getAssetLibraryClient(null, berkeleyCourse, berkeleyInstructor, function(berkeleyClient, berkeleyCourse, berkeleyInstructor) {
        // Davis instructor teaches Davis course
        TestsUtil.getAssetLibraryClient(null, davisCourse, davisInstructor, function(davisClient, davisCourse, davisInstructor) {

          // Verify that migration from Berkeley course to Davis course fails
          UsersTestUtil.assertGetMe(davisClient, davisCourse, null, function(davisMe) {
            AssetsTestUtil.assertMigrationFails(berkeleyClient, berkeleyCourse, davisMe.id, 400, function() {
              return callback();
            });
          });
        });
      });
    });

    /**
     * Test that verifies source and destination course must differ
     */
    it('refuses to migrate a course to itself', function(callback) {
      var course = TestsUtil.generateCourse(global.tests.canvas.ucberkeley);
      var instructor = TestsUtil.generateInstructor(global.tests.canvas.ucberkeley);

      // Instructor teaches course
      TestsUtil.getAssetLibraryClient(null, course, instructor, function(client, course, instructor) {

        // Verify that migration from course to itself fails
        UsersTestUtil.assertGetMe(client, course, null, function(me) {
          AssetsTestUtil.assertMigrationFails(client, course, me.id, 400, function() {
            return callback();
          });
        });
      });
    });
  });

  describe('Remix an exported whiteboard', function() {

    /**
     * Test that verifies that an exported whiteboard asset can be remixed
     */
    it('can be remixed', function(callback) {
      AssetsTestUtil.setupExportedWhiteboard(function(client1, client2, course, user1, user2, exportedWhiteboard) {
        AssetsTestUtil.assertRemixWhiteboard(client1, course, exportedWhiteboard, function() {

          return callback();
        });
      });
    });

    /**
     * Test that verifies that non-whiteboard assets are rejected
     */
    it('rejects assets that are not whiteboards', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        AssetsTestUtil.assertCreateLink(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {
          AssetsTestUtil.assertRemixWhiteboardFails(client, course, asset, 400, function() {

            return callback();
          });
        });
      });
    });

    /**
     * Test that verifies authorization when remixing an exported whiteboard
     */
    it('verifies authorization', function(callback) {
      AssetsTestUtil.setupExportedWhiteboard(function(client1, client2, course, user1, user2, exportedWhiteboard) {

        // Verify that a user in a different course can't remix the whiteboard
        TestsUtil.getAssetLibraryClient(null, null, null, function(foreignClient, foreignCourse, foreignUser) {
          AssetsTestUtil.assertRemixWhiteboardFails(foreignClient, foreignCourse, exportedWhiteboard, 404, function() {

            // Verify that an administrator in a different course can't remix the whiteboard
            var instructor = TestsUtil.generateInstructor();
            TestsUtil.getAssetLibraryClient(null, foreignCourse, instructor, function(instructorClient, foreignCourse, instructor) {
              AssetsTestUtil.assertRemixWhiteboardFails(instructorClient, foreignCourse, exportedWhiteboard, 404, function() {

                return callback();
              });
            });
          });
        });
      });
    });
  });
});
