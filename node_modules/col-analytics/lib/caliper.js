/**
 * Copyright Â©2017. The Regents of the University of California (Regents). All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its documentation
 * for educational, research, and not-for-profit purposes, without fee and without a
 * signed licensing agreement, is hereby granted, provided that the above copyright
 * notice, this paragraph and the following two paragraphs appear in all copies,
 * modifications, and distributions.
 *
 * Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
 * Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
 * http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.
 *
 * IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
 * "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 */

var config = require('config');

var Caliper = require('caliperjs/src/sensor');

var CourseAPI = require('col-course');
var log = require('col-core/lib/logger')('col-analytics/caliper');

var sensor = Caliper.Sensor;

/**
 * Initialize Caliper sensor
 *
 * @return {void}
 */
var init = module.exports.init = function() {
  var schema = config.get('app.https') ? 'https' : 'http';
  var sensorId = schema + '://' + config.get('app.host') + '/sensor/1';
  sensor.initialize(sensorId);

  var client = Caliper.Clients.HttpClient;
  client.initialize(sensorId.concat('/client/1'), {
    'url': config.get('analytics.caliper.url')
  });
  sensor.registerClient(client);
};

/**
 * Track an event via Caliper sensor
 *
 * @param  {User}           user            The user associated with the event
 * @param  {String}         event           A string identifying the event type
 * @param  {Object}         [metadata]      Optional event metadata
 * @return {void}
 */
var track = module.exports.track = function(user, event, metadata) {
  try {
    getCourseIfMissing(user, function(err, course) {
      if (err) {
        log.error({'user': user}, 'Could not retrieve course for user');
      }

      // TODO create event based on user + course + metadata and send via sensor
    });
  } catch (err) {
    log.error(err);
  }
};

var getCourseIfMissing = function(user, callback) {
  if (user.course) {
    return callback(null, user.course);
  }

  CourseAPI.getCourse(user.course_id, callback);
};
