/**
 * Copyright Â©2017. The Regents of the University of California (Regents). All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its documentation
 * for educational, research, and not-for-profit purposes, without fee and without a
 * signed licensing agreement, is hereby granted, provided that the above copyright
 * notice, this paragraph and the following two paragraphs appear in all copies,
 * modifications, and distributions.
 *
 * Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
 * Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
 * http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.
 *
 * IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
 * "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 */

var _ = require('lodash');
var Caliper = require('caliperjs/src/sensor');
var config = require('config');
var moment = require('moment-timezone');

var appPackage = require('../../../package.json');
var CourseAPI = require('col-course');
var log = require('col-core/lib/logger')('col-analytics/caliper');

var entityFactory = Caliper.Entities.EntityFactory;
var eventFactory = Caliper.Events.EventFactory;
var sensor = Caliper.Sensor;

/**
 * Initialize Caliper sensor
 *
 * @return {void}
 */
var init = module.exports.init = function() {
  var schema = config.get('app.https') ? 'https' : 'http';
  var sensorId = schema + '://' + config.get('app.host') + '/sensor/1';
  sensor.initialize(sensorId);

  var client = Caliper.Clients.HttpClient;
  client.initialize(sensorId.concat('/client/1'), {
    'url': config.get('analytics.caliper.url')
  });
  sensor.registerClient(client);
};

/**
 * Track an event via Caliper sensor
 *
 * @param  {User}           user            The user associated with the event
 * @param  {String}         event           A string identifying the event type
 * @param  {Object}         [metadata]      Optional event metadata
 * @return {void}
 */
var track = module.exports.track = function(user, event, metadata) {
  getCourseIfMissing(user, function(err, course) {
    if (err) {
      log.error({'user': user.id}, 'Could not retrieve course for user');
    }

    try {
      var caliperEvent = buildEvent(user, course, event, metadata);
      if (caliperEvent) {
        var parsedEvent = JSON.parse(Caliper.Clients.ClientUtils.stringify(caliperEvent));
        log.info({'event': parsedEvent}, 'Built Caliper event');

        // TODO send event via sensor
      }
    } catch (caliperError) {
      log.error(caliperError);
    }
  });
};

/**
 * Build a Caliper event from generic event data
 *
 * @param  {User}           user              The user associated with the event
 * @param  {Course}         course            The course associated with the event
 * @param  {String}         eventDescription  A string describing the event type
 * @param  {Object}         [metadata]        Optional event metadata
 * @return {Object}                           The built Caliper event
 */
var buildEvent = function(user, course, eventDescription, metadata) {
  var actor = buildPerson(user, course);
  var courseSite = buildOrganization(course);
  var membership = buildMembership(user, actor, courseSite);

  var action = null;
  var eventType = null;
  var object = null;

  switch (eventDescription) {
    case 'Launch Asset Library':
      action = Caliper.Actions.navigatedTo;
      eventType = Caliper.Events.NavigationEvent;
      object = buildSoftwareApplication('assetlibrary', 'Asset Library');
      break;
    case 'Launch Engagement Index':
      action = Caliper.Actions.navigatedTo;
      eventType = Caliper.Events.NavigationEvent;
      object = buildSoftwareApplication('engagementindex', 'Engagement Index');
      break;
    case 'Launch Impact Studio':
      action = Caliper.Actions.navigatedTo;
      eventType = Caliper.Events.NavigationEvent;
      object = buildSoftwareApplication('dashboard', 'Impact Studio');
      break;
    case 'Launch Whiteboards':
      action = Caliper.Actions.navigatedTo;
      eventType = Caliper.Events.NavigationEvent;
      object = buildSoftwareApplication('whiteboards', 'Whiteboards');
      break;
    // If event description is not matched, exit early
    default:
      return null;
  }

  return eventFactory().create(eventType, {
    'actor': actor,
    'action': action.term,
    'object': object,
    'eventTime': moment.utc(),
    'group': courseSite,
    'membership': membership
  });
};

/**
 * Create a Caliper Membership entity linking a Person to an Organization
 *
 * @param  {User}           user            SuiteC user data
 * @param  {Object}         actor           Caliper Actor object created from the SuiteC user
 * @param  {Object}         courseSite      Caliper Organization object created from the SuiteC course
 * @return {Object}                         The created Membership entity
 */
var buildMembership = function(user, actor, courseSite) {
  var membershipRoles = [];
  if (user.canvas_course_role) {
    _.each(user.canvas_course_role.split(','), function(role) {
      switch (role) {
        case 'Instructor':
        case 'urn:lti:role:ims/lis/Instructor':
          membershipRoles.push('Instructor');
          break;
        case 'TeachingAssistant':
        case 'urn:lti:role:ims/lis/TeachingAssistant':
          membershipRoles.push('TeachingAssistant');
          break;
        case 'Administrator':
        case 'urn:lti:instrole:ims/lis/Administrator':
          membershipRoles.push('Administrator');
          break;
        case 'ContentDeveloper':
        case 'urn:lti:role:ims/lis/ContentDeveloper':
          membershipRoles.push('ContentDeveloper');
          break;
        default:
          break;
      }
    });
  }
  if (_.isEmpty(membershipRoles)) {
    membershipRoles.push('Learner');
  }

  var membershipStatus = user.canvas_enrollment_state === 'active' ? 'Active' : 'Inactive';

  return entityFactory().create(Caliper.Entities.Membership, {
    'id': courseSite.id + '/members/' + user.canvas_user_id,
    'member': actor.id,
    'organization': courseSite.id,
    'roles': _.uniq(membershipRoles),
    'status': membershipStatus
  });
};

/**
 * Create a Caliper Organization entity from a SuiteC course object
 *
 * @param  {Course}         course          The course to be transformed
 * @return {Object}                         The created Organization entity
 */
var buildOrganization = function(course) {
  var schema = course.canvas.use_https ? 'https' : 'http';
  var courseSiteId = schema + '://' + course.canvas.canvas_api_domain + '/courses/' + course.canvas_course_id;
  return entityFactory().create(Caliper.Entities.Organization, {
    'id': courseSiteId,
    'name': course.name
  });
};

/**
 * Create a Caliper Person entity from SuiteC user and course objects
 *
 * @param  {User}           user            The user to be transformed
 * @param  {Course}         course          The course associated with the user
 * @return {Object}                         The created Person entity
 */
var buildPerson = function(user, course) {
  var schema = course.canvas.use_https ? 'https' : 'http';
  var userId = schema + '://' + course.canvas.canvas_api_domain + '/users/' + user.canvas_user_id;
  return entityFactory().create(Caliper.Entities.Person, {
    'id': userId,
    'name': user.canvas_full_name
  });
};

/**
 * Create a Caliper SoftwareApplication entity representing a SuiteC LTI tool
 *
 * @param  {String}         toolId        String id of the tool
 * @param  {String}         toolName      Full name of the tool
 * @return {Object}                       The created SoftwareApplication entity
 */
var buildSoftwareApplication = function(toolId, toolName) {
  var schema = config.get('app.https') ? 'https' : 'http';
  var cartridgeUrl = schema + '://' + config.get('app.host') + '/lti/' + toolId + '.xml';
  return entityFactory().create(Caliper.Entities.SoftwareApplication, {
    'id': cartridgeUrl,
    'name': toolName,
    'version': appPackage.version
  });
};

/**
 * Retrieve course associated with user, if not already present
 *
 * @param  {User}           user              The user associated with the event
 * @param  {Function}       callback          Standard callback function
 * @param  {Object}         callback.err      An error that occurred, if any
 * @param  {Asset}          callback.course   The requested course object
 * @return {void}
 */
var getCourseIfMissing = function(user, callback) {
  if (user.course) {
    return callback(null, user.course);
  }

  CourseAPI.getCourse(user.course_id, callback);
};
