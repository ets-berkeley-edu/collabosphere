/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var config = require('config');
var Mixpanel = require('mixpanel');

/**
 * Initialse the Mixpanel analytics
 */
var init = function() {
  if (config.get('analytics.enabled')) {
    mixpanel = Mixpanel.init(config.get('analytics.apiKey'));
  }
}

/**
 * Store or update the profile for a user for analytical purposes
 *
 * @param  {User}           user            The user for which a profile should be stored or updated
 */
var identify = module.exports.identify = function(user) {
  if (mixpanel) {
    mixpanel.people.set(user.id, _.extend({
      '$name': user.canvas_full_name,
      '$created': user.created_at
    }, _.pick(user, [
      'course_id', 'canvas_user_id', 'canvas_course_role', 'canvas_enrollment_state',
      'canvas_image', 'points', 'share_points', 'last_activity', 'updated_at', 'is_admin'
    ])));
  }
};

/**
 * Track a new event
 *
 * @param  {User}           user            The user for which to track the event
 * @param  {String}         event           The unique identifier of the event to track
 * @param  {Object}         [options]       Additional options to store against the specified event
 */
var track = module.exports.track = function(user, event, options) {
  if (mixpanel) {
    mixpanel.track(event, _.extend({'distinct_id': user.id}, options));
  }
};

/**
 * Get the tracking properties for an asset
 *
 * @param  {Asset}          asset           The asset for which to get the tracking properties
 * @return {Object}                         The tracking properties for the provided asset
 */
var getAssetProperties = module.exports.getAssetProperties = function(asset) {
  return {
    'asset_id': asset.id,
    'asset_type': asset.type,
    'asset_url': asset.url,
    'asset_title': asset.title,
    'asset_canvas_assignment_id': asset.canvas_assignment_id,
    'asset_description': asset.description,
    'asset_thumbnail_url': asset.thumbnail_url,
    'asset_image_url': asset.image_url,
    'asset_embed_id': asset.embed_id,
    'asset_mime': asset.mime,
    'asset_source': asset.source,
    'asset_likes': asset.likes,
    'asset_dislikes': asset.dislikes,
    'asset_views': asset.views,
    'asset_liked': asset.liked,
    'asset_comment_count': asset.comment_count,
    'asset_created_at': asset.created_at,
    'asset_updated_at': asset.updated_at,
    'asset_categories': _.pluck(asset.categories, 'id'),
    'asset_categories_count': asset.categories.length,
    'asset_users': _.pluck(asset.users, 'id'),
    'asset_users_count': asset.users.length
  };
};

/**
 * Get the tracking properties for a whiteboard
 *
 * @param  {Whiteboard}     whiteboard      The whiteboard for which to get the tracking properties
 * @return {Object}                         The tracking properties for the provided whiteboard
 */
var getWhiteboardProperties = module.exports.getWhiteboardProperties = function(whiteboard) {
  // Base whiteboard properties
  var properties = {
    'whiteboard_id': whiteboard.id,
    'whiteboard_title': whiteboard.title,
    'whiteboard_thumbnail_url': whiteboard.thumbnail_url,
    'whiteboard_image_url': whiteboard.image_url,
    'whiteboard_created_at': whiteboard.created_at,
    'whiteboard_updated_at': whiteboard.updated_at,
    'whiteboard_members': whiteboard.members.length,
  };
  // The number of elements in the whiteboard
  if (whiteboard.whiteboard_elements) {
    properties.whiteboard_elements = whiteboard.whiteboard_elements.length;
  } else if (whiteboard.whiteboardElements) {
    properties.whiteboard_elements = whiteboard.whiteboardElements.length;
  }
  // The number of online users in the whiteboard
  if (whiteboard.onlineUsers) {
    properties.whiteboard_online = whiteboard.onlineUsers.length;
  }
  return properties;
};

init();
