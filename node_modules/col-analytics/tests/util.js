/**
 * Copyright Â©2017. The Regents of the University of California (Regents). All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software and its documentation
 * for educational, research, and not-for-profit purposes, without fee and without a
 * signed licensing agreement, is hereby granted, provided that the above copyright
 * notice, this paragraph and the following two paragraphs appear in all copies,
 * modifications, and distributions.
 *
 * Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
 * Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
 * http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.
 *
 * IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
 * THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
 * SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
 * "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
 * ENHANCEMENTS, OR MODIFICATIONS.
 */

var _ = require('lodash');
var assert = require('assert');
var config = require('config');
var url = require('url');

var MockedRequest = require('col-tests/lib/model').MockedRequest;

var caliperUrl = url.parse(config.get('analytics.caliper.url'));

/**
 * Expect to receive a Caliper event matching provided data
 *
 * @param  {User}               user                          The SuiteC user associated with the event
 * @param  {Course}             course                        The SuiteC course associated with the event
 * @param  {Object}             [opts]                        Optional parameters to verify
 * @return {void}
 * @throws {AssertionError}                                   Error thrown when an assertion failed
 */
var expectCaliperEvent = module.exports.expectCaliperEvent = function(user, course, opts) {
  var mockedRequest = new MockedRequest('POST', caliperUrl.pathname, 201, null, null, null, function(req) {
    assertCaliperPayload(req.body, user, course, opts);
  });
  global.tests.caliper.appServer.expect(mockedRequest);
};

/**
 * Assert that a Caliper envelope containing a single event has expected properties
 *
 * @param  {Object}             envelope                      The Caliper envelope to be checked
 * @param  {User}               user                          The SuiteC user associated with the event
 * @param  {Course}             course                        The SuiteC course associated with the event
 * @param  {Object}             [opts]                        Optional parameters to verify
 * @return {void}
 * @throws {AssertionError}                                   Error thrown when an assertion failed
 */
var assertCaliperPayload = module.exports.assertCaliperPayload = function(envelope, user, course, opts) {
  opts = opts || {};

  assert.ok(envelope);
  assert.ok(envelope.sensor);
  assert.ok(envelope.sendTime);

  assert.strictEqual(envelope.dataVersion, 'http://purl.imsglobal.org/ctx/caliper/v1p1');
  assert.strictEqual(envelope.data.length, 1);

  assertCaliperEvent(envelope.data[0], user, course, opts);
};

/**
 * Assert that a Caliper event has expected properties
 *
 * @param  {Object}             event                         The event object to assert the properties for
 * @param  {User}               user                          The SuiteC user associated with the event
 * @param  {Course}             course                        The SuiteC course associated with the event
 * @param  {Object}             [opts]                        Optional parameters to verify
 * @return {void}
 * @throws {AssertionError}                                   Error thrown when an assertion failed
 */
var assertCaliperEvent = function(event, user, course, opts) {
  assert.strictEqual(event['@context'], 'http://purl.imsglobal.org/ctx/caliper/v1p1');
  assert.ok(event.id.startsWith('urn:uuid:'));
  assert.ok(event.eventTime);

  if (opts.type) {
    assert.strictEqual(opts.type, event.type);
  } else {
    assert.ok(event.type);
  }

  if (opts.action) {
    assert.strictEqual(opts.action, event.action);
  } else {
    assert.ok(event.action);
  }

  assert.ok(event.object.id);
  if (opts.object) {
    _.forOwn(opts.object, function(value, key) {
      assert.deepEqual(value, event.object[key]);
    });
  }

  if (user) {
    assert.ok(event.actor.id.endsWith(user.id));
    assert.strictEqual(event.actor.type, 'Person');
    assert.strictEqual(event.actor.name, user.fullName);
  }

  if (course) {
    assert.ok(event.group.id.endsWith(course.id));
    assert.strictEqual(event.group.type, 'Organization');
    assert.strictEqual(event.group.name, course.title);
  }

  if (user && course) {
    assert.ok(event.membership.member.endsWith(user.id));
    assert.ok(event.membership.organization.endsWith(course.id));
    assert.strictEqual(event.membership.type, 'Membership');
  }

  if (opts.extensions) {
    _.forOwn(opts.extensions, function(value, key) {
      assert.deepEqual(value, event.extensions[key]);
    });
  }
};
