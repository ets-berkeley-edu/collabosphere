/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');
var randomstring = require('randomstring');

var TestsUtil = require('col-tests');
var UsersTestUtil = require('col-users/tests/util');

var CategoriesTestUtil = require('./util');

describe('Categories', function() {

  describe('Create new categories', function() {

    /**
     * Test that verifies that a new category can be created
     */
    it('can be created', function(callback) {
      // Create a category as a course administrator
      var adminUser = TestsUtil.generateAdminUser();
      TestsUtil.getAssetLibraryClient(null, null, adminUser, function(client, course, adminUser) {

        CategoriesTestUtil.assertCreateCategory(client, course, 'Category 1', function(category) {

          return callback();
        });
      });
    });

    /**
     * Test that verifies validation when creating a new category
     */
    it('is validated', function(callback) {
      var adminUser = TestsUtil.generateAdminUser();
      TestsUtil.getAssetLibraryClient(null, null, adminUser, function(client, course, adminUser) {

        // Missing title
        CategoriesTestUtil.assertCreateCategoryFails(client, course, null, 400, function() {
          CategoriesTestUtil.assertCreateCategoryFails(client, course, '', 400, function() {

            // Too long title
            CategoriesTestUtil.assertCreateCategoryFails(client, course, randomstring.generate(256), 400, function() {

              return callback();
            });
          });
        });
      });
    });

    /**
     * Test that verifies authorization when creating a new category
     */
    it('verifies authorization', function(callback) {
      // Verify that a new category can not be created by a non-administrator
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        CategoriesTestUtil.assertCreateCategoryFails(client, course, 'Category 1', 401, function() {

          return callback();
        });
      });
    });
  });

  describe('Get categories', function() {

    /**
     * Test that verifies that the categories in a course can be retrieved
     */
    it('can be retrieved', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        // Retrieve the empty categories list
        CategoriesTestUtil.assertGetCategories(client1, course, 0, function(categories) {

          // Add a category and verify that is returned as part of the category list
          var adminUser = TestsUtil.generateAdminUser();
          TestsUtil.getAssetLibraryClient(null, course, adminUser, function(client2, course, adminUser) {
            CategoriesTestUtil.assertCreateCategory(client2, course, 'Category 1', function(category1) {
              CategoriesTestUtil.assertGetCategories(client1, course, 1, function(categories) {
                CategoriesTestUtil.assertCategory(categories[0], category1);

                // Add another category and verify that it is also returned as part of the category list
                CategoriesTestUtil.assertCreateCategory(client2, course, 'Category 2', function(category2) {
                  CategoriesTestUtil.assertGetCategories(client1, course, 2, function(categories) {
                    CategoriesTestUtil.assertCategory(categories[0], category1);
                    CategoriesTestUtil.assertCategory(categories[1], category2);

                    return callback();
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Edit category', function() {

    /**
     * Test that verifies that a category can be edited
     */
    it('can be edited', function(callback) {
      var adminUser = TestsUtil.generateAdminUser();
      TestsUtil.getAssetLibraryClient(null, null, adminUser, function(client, course, adminUser) {
        CategoriesTestUtil.assertCreateCategory(client, course, 'Category 1', function(category) {

          // Verify that the category can be edited
          CategoriesTestUtil.assertEditCategory(client, course, category.id, 'Updated category 1', function(category) {

            return callback();
          });
        });
      });
    });

    /**
     * Test that verifies validation when editing a category
     */
    it('is validated', function(callback) {
      var adminUser = TestsUtil.generateAdminUser();
      TestsUtil.getAssetLibraryClient(null, null, adminUser, function(client, course, adminUser) {
        CategoriesTestUtil.assertCreateCategory(client, course, 'Category 1', function(category) {

          // Invalid category id
          CategoriesTestUtil.assertEditCategoryFails(client, course, 'Not a number', 'Updated category 1', 400, function() {
            CategoriesTestUtil.assertEditCategoryFails(client, course, -1, 'Updated category 1', 404, function() {
              CategoriesTestUtil.assertEditCategoryFails(client, course, 234234233, 'Updated category 1', 404, function() {

                // Missing title
                CategoriesTestUtil.assertEditCategoryFails(client, course, category.id, null, 400, function() {
                  CategoriesTestUtil.assertEditCategoryFails(client, course, category.id, '', 400, function() {

                    // Too long title
                    CategoriesTestUtil.assertEditCategoryFails(client, course, category.id, randomstring.generate(256), 400, function() {

                      return callback();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies authorization when editing a category
     */
    it('verifies authorization', function(callback) {
      var adminUser1 = TestsUtil.generateAdminUser();
      TestsUtil.getAssetLibraryClient(null, null, adminUser1, function(client1, course1, adminUser1) {
        CategoriesTestUtil.assertCreateCategory(client1, course1, 'Category 1', function(category1) {

          // Verify that a category can not be edited by a non-administrator
          TestsUtil.getAssetLibraryClient(null, course1, null, function(client2, course, user2) {
            CategoriesTestUtil.assertEditCategoryFails(client2, course1, category1.id, 'Updated category 1', 401, function() {

              // Verify that the category has not been updated
              CategoriesTestUtil.assertGetCategories(client2, course1, 1, function(categories) {
                CategoriesTestUtil.assertCategory(categories[0], category1);

                // Verify that a category in a different course can not be updated
                var adminUser2 = TestsUtil.generateAdminUser();
                TestsUtil.getAssetLibraryClient(null, null, adminUser2, function(client3, course2, adminUser2) {
                  CategoriesTestUtil.assertCreateCategory(client3, course2, 'Category 2', function(category2) {
                    CategoriesTestUtil.assertEditCategoryFails(client1, course2, category2.id, 'Updated category 2', 401, function() {

                      // Verify that the category has not been updated
                      CategoriesTestUtil.assertGetCategories(client3, course2, 1, function(categories) {
                        CategoriesTestUtil.assertCategory(categories[0], category2);

                        return callback();
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});
