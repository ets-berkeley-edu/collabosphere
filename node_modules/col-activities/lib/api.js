/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var Joi = require('joi');

var ActivitiesDefaults = require('./default');

/**
 * TODO
 */
var getActivityTypeConfiguration = module.exports.getActivityTypeConfiguration = function(ctx, callback) {
  // Get the activity type configraton overrides from the DB
  var options = {
    'where': {
      'course_id': ctx.course.id
    }
  };

  DB.ActivityType.findAll(options).complete(function(err, activityTypeOverrides) {
    if (err) {
      log.error({'err': err, 'course': ctx.course}, 'Failed to get the activity type configraton overrides');
      return callback({'code': 500, 'msg': err.message});
    }

    // Overlay the overrides on top of the activity type configuration defaults
  });
};

/**
 * Edit the configuration for an activity type in a course. This will override the
 * default configuration for that activity type
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {String}         activityType                    The activity type for which the configuration should be updated. One of the keys in `col-activities/lib/constants.js`
 * @param  {Number}         [points]                        The number of points this activity type should contribute towards a user's points
 * @param  {Boolean}        [enabled]                       Whether activities of this type should contributed towards a user's points
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {ActivityType}   callback.activityType           The updated activity type
 */
var editActivityTypeConfiguration = module.exports.editActivityTypeConfiguration = function(ctx, activityType, points, enabled, callback) {
  // Only administrators are able to edit the configuration for an activity type
  if (!ctx.user.is_admin) {
    log.error({'id': ctx.user.id}, 'Unauthorized to edit the configuration for an activity type');
    return callback({'code': 401, 'msg': 'Unauthorized to edit the configuration for an activity type'});
  }

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'activityType': Joi.any().allow(_.keys(ActivitiesDefaults)).required(),
    'points': Joi.number().optional(),
    'enabled': Joi.boolean().optional
  });

  var validationResult = Joi.validate({
    'activityType': activityType,
    'points': points,
    'enabled': enabled
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  } else if (_.isNull(points) && _.isNull(enabled)) {
    return callback({'code': 400, 'msg': 'Either a points value or an enabled value needs to be provided'});
  }

  // Store the activity type configuration override in the DB.
  // If an activity type configuration already exists, it will
  // be overwritten
  var activityTypeOverride = {
    'course_id': ctx.course.id,
    'type': activityType,
    'points': points,
    'enabled': enabled
  };

  DB.ActivityType.upsert(activityTypeOverride).complete(function(err, activityTypeConfiguration) {
    if (err) {
      log.error({'type': err}, 'Failed to edit the configuration for an activity type');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback(null, activityTypeConfiguration);
  });
};
