/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');

var TestsUtil = require('col-tests');
var UsersTestUtil = require('col-users/tests/util');

var ActivitiesDefaults = require('col-activities/lib/default');
var ActivitiesTestUtil = require('./util');

describe('Activity Types', function() {

  describe('Edit activity type configuration', function() {

    /**
     * Test that verifies that a new category can be created
     *
    it('can be created', function(callback) {
      // Create a category as a course administrator
      var adminUser = TestsUtil.generateAdminUser();
      TestsUtil.getAssetLibraryClient(null, null, adminUser, function(client, course, adminUser) {

        CategoriesTestUtil.assertCreateCategory(client, course, 'Category 1', function(category) {

          return callback();
        });
      });
    });*/

    /**
     * Test that verifies validation when creating a new category
     *
    it('is validated', function(callback) {
      var adminUser = TestsUtil.generateAdminUser();
      TestsUtil.getAssetLibraryClient(null, null, adminUser, function(client, course, adminUser) {

        // Missing title
        CategoriesTestUtil.assertCreateCategoryFails(client, course, null, 400, function() {
          CategoriesTestUtil.assertCreateCategoryFails(client, course, '', 400, function() {

            // Too long title
            CategoriesTestUtil.assertCreateCategoryFails(client, course, randomstring.generate(256), 400, function() {

              return callback();
            });
          });
        });
      });
    });*/

    /**
     * Test that verifies authorization when creating a new category
     *
    it('verifies authorization', function(callback) {
      // Verify that a new category can not be created by a non-administrator
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        CategoriesTestUtil.assertCreateCategoryFails(client, course, 'Category 1', 401, function() {

          return callback();
        });
      });
    });*/
  });

  describe('Get activity type configuration', function() {

    /**
     * Test that verifies that the activity type configration for a course can be retrieved
     */
    it('can be retrieved', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course1, user1) {

        // Verify that the default configuration is returned by default
        ActivitiesTestUtil.assertGetActivityTypeConfiguration(client1, course1, function(configuration) {
          _.each(ActivitiesDefaults, function(activityType) {
            ActivitiesTestUtil.assertActivityType(_.findWhere(configuration, {'type': activityType.type}), activityType);
          });

          return callback();
        });
      });
    });
  });
});
