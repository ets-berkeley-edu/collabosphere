/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');

var AssetsTestUtil = require('col-assets/tests/util');
var TestsUtil = require('col-tests');
var UsersTestUtil = require('col-users/tests/util');

var ActivitiesDefaults = require('col-activities/lib/default');

/* Activities */

/**
 * Assert that an activity has increased the points for a user by the expected amount
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             type                            The type of the activity
 * @param  {Me}                 originalMe                      The me object before the activity took place
 * @param  {Boolean}            isTrigger                       Whether the current user is the user that triggered the activity
 * @param  {Function}           callback                        Standard callback function
 * @api private
 */
var assertPoints = function(client, course, type, originalMe, isTrigger, callback) {
  // Get the points that are earned when creating a new link asset
  assertGetActivityTypeConfiguration(client, course, function(configuration) {
    var activityPoints = _.findWhere(configuration, {'type': type}).points;

    // Verify that the points for the user have increased
    UsersTestUtil.assertGetMe(client, course, null, function(me) {
      var expectedPoints = originalMe.points + activityPoints;
      assert.strictEqual(me.points, expectedPoints);
      assert.ok(me.last_activity);
      if (isTrigger && !_.isNull(originalMe.last_activity)) {
        assert.ok(me.last_activity > originalMe.last_activity);
      } else if (!isTrigger) {
        assert.strictEqual(me.last_activity, originalMe.last_activity);
      }

      // Ensure that the user is sharing their points with the course
      UsersTestUtil.assertUpdateSharePoints(client, course, true, function(me) {
        assert.strictEqual(me.points, expectedPoints);
        assert.ok(me.last_activity);
        if (isTrigger && !_.isNull(originalMe.last_activity)) {
          assert.ok(me.last_activity > originalMe.last_activity);
        } else if (!isTrigger) {
          assert.strictEqual(me.last_activity, originalMe.last_activity);
        }

        // Verify that the points are reflected in the list of users
        UsersTestUtil.assertGetUsers(client, course, null, false, function(users) {
          var user = _.findWhere(users, {'id': me.id});
          assert.strictEqual(user.points, expectedPoints);
          assert.ok(user.last_activity);
          if (isTrigger && !_.isNull(originalMe.last_activity)) {
            assert.ok(user.last_activity > originalMe.last_activity);
          } else if (!isTrigger) {
            assert.strictEqual(user.last_activity, originalMe.last_activity);
          }

          return callback();
        });
      });
    });
  });
};

/**
 * Assert that a new link asset can be created and activity points are earned
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             title                           The title of the link
 * @param  {String}             url                             The url of the link
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number[]}           [opts.categories]               The ids of the categories to which the link should be associated
 * @param  {String}             [opts.description]              The description of the link
 * @param  {String}             [opts.source]                   The source of the link
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateLinkActivity = module.exports.assertCreateLinkActivity = function(client, course, title, url, opts, callback) {
  // Get the me object for the current user
  UsersTestUtil.assertGetMe(client, course, null, function(me) {
    // Create the link asset
    AssetsTestUtil.assertCreateLink(client, course, title, url, opts, function(asset) {
      // Verify that the points for the user have increased
      assertPoints(client, course, 'add_asset', me, true, callback);
    });
  });
};

// Comment
// Like

/* Points configuration */

/**
 * Assert that an activity type configuration has all expected properties
 *
 * @param  {ActivityType}       activityType                  The activity type to assert the properties for
 * @param  {Object}             [opts]                        Optional parameters to verify the activity type with
 * @param  {Category}           [opts.expectedActivityType]   The activity type to which the provided activity type should be compared
 * @throws {AssertionError}                                   Error thrown when an assertion failed
 */
var assertActivityType = module.exports.assertActivityType = function(activityType, opts) {
  opts = opts || {};

  // Ensure that all expected properties are present
  assert.ok(activityType);
  assert.ok(activityType.type);
  assert.ok(_.findWhere(ActivitiesDefaults, {'type': activityType.type}));
  assert.ok(_.isFinite(activityType.points));
  assert.ok(_.isBoolean(activityType.enabled));

  // Ensure that all the activity type configuration properties are the same as the ones for
  // the expected activity type configuration
  if (opts.expectedActivityType) {
    assert.strictEqual(activityType.type, opts.expectedActivityType.type);
    assert.strictEqual(activityType.points, opts.expectedActivityType.points);
    assert.strictEqual(activityType.enabled, opts.expectedActivityType.enabled);
  }
};

/**
 * Assert that the activity type configration for a course can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Function}           callback                        Standard callback function
 * @param  {Object}             callback.configuration          The activity type configuration for the course
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetActivityTypeConfiguration = module.exports.assertGetActivityTypeConfiguration = function(client, course, callback) {
  client.activities.getActivityTypeConfiguration(course, function(err, configuration) {
    assert.ok(!err);
    assert.ok(configuration);
    // Verify that a configuration for all activity types is present
    assert.strictEqual(configuration.length, ActivitiesDefaults.length);
    _.each(ActivitiesDefaults, function(activityTypeDefault) {
      assertActivityType(_.findWhere(configuration, {'type': activityTypeDefault.type}));
    });

    return callback(configuration);
  });
};

/**
 * Assert that the activity type configration for a course can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @param  {Object}             callback.configuration          The activity type configuration for the course
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetActivityTypeConfigurationFails = module.exports.assertGetActivityTypeConfigurationFails = function(client, course, code, callback) {
  client.activities.getActivityTypeConfiguration(course, function(err, configuration) {
    assert.ok(err);
    assert.strictEqual(err.code, code);
    assert.ok(!configuration);

    return callback();
  });
};

/**
 * Assert that the configuration for an activity type in a course can be edited
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             type                            The activity type for which the configuration should be updated. One of the types in `col-activities/lib/constants.js`
 * @param  {Number}             [points]                        The number of points this activity type should contribute towards a user's points
 * @param  {Boolean}            [enabled]                       Whether activities of this type should contributed towards a user's points
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertEditActivityTypeConfiguration = module.exports.assertEditActivityTypeConfiguration = function(client, course, type, points, enabled, callback) {
  client.activities.editActivityTypeConfiguration(course, type, points, enabled, function(err, activityType) {
    assert.ok(!err);

    return callback();
  });
};

/**
 * Assert that the configuration for an activity type in a course can be edited
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
 * @param  {String}             type                            The activity type for which the configuration should be updated. One of the types in `col-activities/lib/constants.js`
 * @param  {Number}             [points]                        The number of points this activity type should contribute towards a user's points
 * @param  {Boolean}            [enabled]                       Whether activities of this type should contributed towards a user's points
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertEditActivityTypeConfigurationFails = module.exports.assertEditActivityTypeConfigurationFails = function(client, course, type, points, enabled, code, callback) {
  client.activities.editActivityTypeConfiguration(course, type, points, enabled, function(err, activityType) {
    assert.ok(err);
    assert.strictEqual(err.code, code);

    return callback();
  });
};
